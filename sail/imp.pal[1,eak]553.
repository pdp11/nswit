;;; -*-PALX-*-
%impvn===%fnam2

.sbttl IMP Interface

;;; The module supports the ARPAnet Host-IMP protocol (BBN Report No. 1822).


chlink==227
iplink==233

lnkbas==50

rsntto==60.*15.		; reset timeout, these ought to respond fast..
clsgto==60.*65.		; close timeout, make these a little longer than
opngto==60.*65.		; open timeout   the IMP timeouts
rfnmto==60.*90.


;;; define some symbols describing the imp interface

;impiin==impvec+0
;impoin==impvec+4
impist==impcsr+0
impwai==impcsr+4
impwci==impcsr+6
impost==impcsr+10
impwao==impcsr+14
impwco==impcsr+16

hstrly==4
istoen==10
ieom==20000
inrst==2
igo==hstrly+istoen+1
ordy==200
oweom==4
outrst==2
ogo==1

.sbttl	Low Level Input Process

defvar <
intssp:	.blkw 1			; SP for throwing back to start of INTSK
>

intsk:	mov sp,intssp
intsk1:	kcall impini

inloop:	kcall rdfimp		;get packet from the imp
	call print,#s.gotm
	cmpb il.fmt(r3),#17	;was this last a new style leader?
	bne imperr		;we are not interested in old leaders
	call gethte,r3,r2	;find host table entry for this msg.
	movb il.typ(r3),r0	;get the msg typ
	cmp r0,#10.		;upper limit
	bhi imperr
	asl r0			;for indexing
	inc msgcnt(r0)		;count number of each.
	jmp @rdrtbl(r0)		;branch to handler

rdrtbl:	.word typ0		;  0 Regular Message
	.word ldrerr		;  1 Error in Leader
	.word quitrd		;  2 IMP Going Down
	.word quitrd		;  3 Unused
	.word quitrd		;  4 NOP
	.word rfnm		;  5 RFNM
	.word dead		;  6 Dead Host Status
	.word dead		;  7 Destination Host or IMP Dead
	.word resend		;  8 Error in Data
	.word incplt		;  9 Incomplete Transmission
	.word hreset		; 10 Interface Reset


imperr:	call printa,#ldrmsg

quitrd:	kcall eomchk
quitr1:	;; this is where typ0 comes.
	call print,#s.endm
	cocall
	br inloop

intsk2:	mov intssp,sp
	br intsk1

impini:	mov #inrst,@#impist	; reset the IMP interface input logic

	mov #outrst,@#impost	; reset the IMP interface output logic
	push #30.		; SLEEP arg: 60ths
	kcall sleep		; wait .5sec for IMP to notice host relay
				; is open
	bis #hstrly,@#impist	; set host relay to tell IMP we're up
loop <	  cocall		; wait for relay to settle
	  bit #4000,@#impist	; ...
	  rptl ne		; ...
	  >

	kretrn


rdfimp:
loop <	  tstb @#impist		;is the IMP ready yet?
	  exitl mi		;yes, it's ready
	  cocall
	  rptl
	  >

	mov #ilbuf,r0		; PHYADD arg: R0/ virtual address
	call phyadd		; get physical address of IMP leader buffer
	mov r1,@#impwai		; set DMA address<0:15>
	mov #-lilbuf,@#impwci	; set DMA word count
	bis #igo,r0		; add bits to DMA address<16:17>
	mov r0,@#impist		; start DMA
	call iwait		; wait for it to complete
	bcs intsk2		; IMP died in middle, try again
	cmp @#impwci,#-1	; IMPWCI should be -1 or 0 because IMP
				; always sends us 80 or 96 bits
	if lt,<			; it's not!
	  call printa,#shrtms	; tell the world
	  br rdfimp		; and try try again
	  >

	cmpb ilbuf+il.lnk,#chlink	; is this is for link 227 (octal)?
	if ne,<			; no
	  mov #ilbuf,r3
	  kretrn
	  >
	;; link 227: insert into chaosnet
	tstb ilbuf+il.typ	; is this a type 0 message?
	if ne,<			; no, ignore it
	  kcall eomchk		; check that expected EOM is present
	  br rdfimp		; go back for another message
	  >

	mov ilbuf+il.msl,r3	; get message length in bits
	swab r3			; IMP bytes are backward
	add #16.+15.,r3		; add 1 and convert to words, rounding up
	ash #-4,r3		; ...
				; ALCSIZ arg: R3 = size in words
	cmp r3,#pkmasz/2+1	; too big for a chaos packet?
	if hi,<			; yes, soak the data
	  kcall impsoak
	  br rdfimp
	  >
loop <	  kcall alcsiz		; allocate chaos packet to hold data
	  exitl cc
	  cocall
	  rptl
	  >

	push r0
	call phyadd
	mov r1,@#impwai
	neg r3
	mov r3,@#impwci
	bis #igo,r0
	mov r0,@#impist
	pop r0
	call iwait
	if cs,<
	  kcall frepck
	  br intsk2
	  >
	kcall eomchk

	clr (r0)		;clear the link field
	swab pktyp(r0)		;swap the packet header
	swab pklen(r0)
	swab pkdhst(r0)
	swab pkdidx(r0)
	swab pkshst(r0)
	swab pksidx(r0)
	swab pkpkn(r0)
	swab pkakn(r0)
	cmpb pkop(r0),#%coopn	;see if we have to swab the packet
	beq 16$
	cmpb pkop(r0),#%corut	;see if we have to swab the packet
	beq 16$
	cmpb pkop(r0),#%costs	;see if we have to swab the packet
	beq 16$
	cmpb pkop(r0),#300	;see if we have to swab the packet
	blo 17$			;no, give it to the user
16$:	mov pklen(r0),r2	;get packet size in r2
	bic #pkfcnt,r2		;clear forwarding count
	inc r2			;round up to nearest word
	asr r2			;divide by two
	beq 17$			;nothing to swap
	mov r0,r3		;point to packet data area
	add #pkdat,r3
loop <	  swab (r3)+		;swap the data
	  sorl r2		;loop
	  >
17$:	lock mxcilv		;add packet to rcvpkl
	mov r0,@rcvpke		;thread onto end of list
	mov r0,rcvpke		;last packet on list
	unlock			;all done with critical code
	jmp rdfimp


;;; EOMCHK insures there's an EOM when we expect one.
eomchk:	bit #ieom,@#impist	; EOM set as expected?
	if eq,<			; no, IMP wants to send more stuff
	  call printa,#longms	; give notification of lossage
  loop <    mov #-lilbuf,@#impwci	; set up DMA to read some garbage
	    mov #ilbuf,@#impwai		; ...
	    mov #igo,@#impist		; ...
	    ;; wait for DMA to finish
	    call iwait		; wait for DMA to complete
	    exitl cs		; give up if IMP dies
;;; IMPSOAK soaks up unwanted data from the IMP.
impsoak:
	    bit #ieom,@#impist	; did garbage end in EOM?
	    rptl eq		; no, read some more
	    >
	  >
	kretrn


;;; IWAIT waits for DMA to complete.
iwait:
loop <	  cocall
	  tstb @#impist
	  rptl pl
	  >
	bit #40000,@#impist	; NXM?
	if ne,<			; yes
	  bpt			; lose lose
	  >
	bit #1000,@#impist	; relay error?
	clc			; win return if no error
	if ne,<			; yes, probably IMP died during transfer
	  call printa,#s.ryer	; print message
	  sec			; fail return
	  >
	kretrn




lilbuf==<ipl.ln+1>/2		; length of IMP leader buffer in words
defvar <
ilbuf:	.blkw lilbuf		; IMP leader buffer
>

getrst:	proc 1,1,<r0,r1,r3>
	mov ilbuf+il.msl,r3	; get message length in bits
	swab r3			; IMP bytes are backward
	add #15.+32.,r3		; round up to words and add a few for
				; trailer lossage
	ash #-4,r3		; ...
	mov r3,r0		; convert to bytes
	asl r0			; ...
	add #msg.ln+ipl.ln,r0		; add our overhead
	call allmsg,<arg1(fp),r0>,r0	; allocate storage to hold it
	clr ms.nxt(r0)		;we need to clear this field so it can be freed
	mov r0,out1(fp)		;return this to the user

	add #msg.ln,r0
.rept lilbuf
	mov ilbuf+<.rpcnt*2>,(r0)+
.endr
	neg r3
	if ne,<
	  mov r3,@#impwci
	  call phyadd
	  mov r1,@#impwai
	  bis #igo,r0
	  mov r0,@#impist	; start DMA
	  call iwait		; wait for it to finish
	  if cs,<
	    call fremsg,<arg1(fp),out1(fp)>
	    jmp intsk2
	    >
	  >
	call eomchk
	return

rfnm:	call print,#s.grfn
	tstb il.lnk(r3)		;was it rfnm for a control link?
	bne 3$			;regular link this is the hard part.
	bitb #n.rfnm,he.nst(r2)	;was it in rfnm state?
	beq 8$			;no, spurious rfnm
	bicb #n.rfnm,he.nst(r2)	;host up and not waiting for rfnm
	inc rf0cam
	clr he.rft(r2)
;	mov he.lms(r2),r1	;get msg to free
;	clr he.lms(r2)
;1$:	call fremsg,<outare,r1>	;free the message
	jmp quitrd

3$:	movb il.lnk(r3),r1
	cmpb r1,#iplink
	beq 9$
	call lnkscn,<r1,r2>,r1	;search for the socket
	tst r1
	beq 8$			;no known link
	bitb #n.rfnm,sk.nst(r1)	;is this socket waiting for rfnm?
	beq 8$			;spurious rfnm!
	bicb #n.rfnm,sk.nst(r1)	;not RFNM waiting
	inc rf1cam
	clr sk.rft(r1)
	mov r1,r2
;	mov sk.lms(r2),r1	;get msg to free
;	clr sk.lms(r2)
;	br 1$
	jmp quitrd

8$:	inc sprfnm		;count spurious rfnms
	call printa,#s.srfn
9$:	jmp quitrd


incplt:	movb il.stp(r3),r1	;get sub type
	bic #177760,r1		;only four bits...
	add #'0,r1		;turn it to ascii
	movb r1,s.losn		;stuff into msg.
	call printa,#s.glos
	tstb il.lnk(r3)		;was it rfnm for a control link?
	bne 3$			;regular link this is the hard part.
	call hstdwn,<r2,#scemhd>	;host is dead
	jmp quitrd

3$:	movb il.lnk(r3),r1
	call lnkscn,<r1,r2>,r2	;search for the socket
	tst r2
	beq 8$			;no known link
	mov sk.hst(r2),r1	;mark the hte as free too
	call hstdwn,<r1,#scemhd>
8$:	jmp quitrd		;spurious msg!

;;; The IMP detected an error in the leader of last msg
ldrerr:	mov lstmsg,r1		; get the message last sent (to which this
				; error supposedly refers
	call atring,<#lderrs,r1>	;keep a record of such things.
;	mov ms.hst(r1),r2	;get the hte.
;	add #ms.txt,r1		;get ptr to imp leader
	movb il.stp(r3),r3	;get sub type
	bic #177760,r3		;only four bits...
	add #'0,r3		;turn it to ascii
	movb r3,s.errn		;stuff into msg.
	call printa,#s.lerr
	jmp quitrd

hreset:	mov lstmsg,r1
;	mov #-1,ms.nxt(r1)	;mark it so it won't get freed
	call atring,<#rserrs,r1>
	call printa,#s.hrst
	jmp quitrd

dead:	call hstdwn,<r2,#scemhd>	;say it is dead
	jmp quitrd

resend:	jmp quitrd		;ignore these for now

typ0:	call print,#s.typ0
	clr r0
	bisb il.lnk(r3),r0	;is this for the control link?
.if ne asmncp
	if eq,<			; link 0: message for NCP
	  call getrst,ncpare,r4
	  >
	else <			; nonzero link: message for socket
.endc
.if ne asmtcp
	  cmp r0,#iplink
	  beq iptyp0
.endc
.if ne asmncp
	  call lnkskt,<r0,r2>,r0	;get the socket ptr for this link
	  tst r0
	  beq 1$		;no such link
	  cmpb #s.open,sk.sts(r0)	;is the socket in the open state
	  bne 1$			;no, then just through it away

	  call getrst,sk.are(r0),r4

	  movb msg.ln+ipl.ln+hl.bsz(r4),r1	;get byte size
	  mov msg.ln+ipl.ln+hl.nby(r4),r3	;get number of bytes
	  swab r3
	  mul r3,r1		;get 16-bit product bit size of msg
	  sub r1,sk.bsl(r0)	;credit the bit allocation
	  sbc sk.bsh(r0)
	  ash #-3,r1		;convert to bytes
	  sub r1,outalc		;update outstanding allocation
	  dec sk.nms(r0)	;use up a message allocation

	  cmp #-1,sk.nms(r0)	;did we overshoot our message allocation?
	  if eq,<		;he over shot.
3$:	    inc noaloc		;If he sends a message w/o allocation
	    call printa,#s.noal
	    br 4$		;we want to know when this happens...
	    >
	  cmp sk.nms(r0),sk.mma(r0)	;is msg allocation below min?
	  blos 4$		;send him more.
	  cmp #-1,sk.bsh(r0)	;what about bit allocation
	  beq 3$		;over shot
	  if lt,<		;more than 64K bits: plenty
	    cmp sk.bsl(r0),sk.mba(r0)	;below the minimum?
	    if los,<		;no, he has enough of both.
4$:	      call sndalc,r0	;send allocation for this connection
	      if cs,<
		bisb #n.sdal,sk.nst(r0)	;send allocation to this guy later
		>
	      >
	    >
	  >

	mov msg.ln+il.msl(r4),r1	;calculate the length
	swab r1			;cause the bytes are backwards....
	add #17,r1
	bic #17,r1
	ash #-3,r1		;bits to bytes
	add #ipl.ln,r1		;room for msg header and IMP leader
	mov r1,ms.len(r4)	;fill in the length field
	mov r0,ms.skp(r4)	;fill in the socket
	mov r2,ms.hst(r4)	;fill in the hte
	makptr r4,ms.txt,r1	;now r1 has ptr to real start
	mov r1,ms.hdr(r4)	;initialize these guys too
	mov r1,ms.hsb(r4)
	tst r0			;is there a socket?
	if eq,<			; no
	  mov r4,r2
	  mov tcbncp,r3
	  jsr pc,putmsg		;r2=msg, r3=tcb, send to the ncptsk
	  inc rf0rcv		;count incomming h-h control msgs
	  >
	else <
	  inc sk.nqm(r0)	;count queued msgs
	  mov sk.lqm(r0),r3	;queue the msg on the right socket
	  mov r4,sk.lqm(r0)
	  clr ms.nxt(r4)
	  tst r3
	  if eq,<mov r4,sk.fqm(r0)>
	  else <mov r4,ms.nxt(r3)>
	  add #1,rf1rcv		;count incomming data msgs
	  adc rf1rcv+2		; double precision
	  >
	jmp quitr1
.endc	; asmncp
1$:	call printa,#badlnk	;record for OTA's amusement
	call impsoak		;punt the message data
	jmp quitr1


.if ne asmtcp
iptyp0:	mov ilbuf+il.msl,r3	; get message length in bits
	swab r3			; IMP bytes are backward
	add #7,r3		; round up to bytes
	ash #-3,r3		; ...
	cmp r3,#ipminh		; check that there's a full header to read
	if lo,<
	  bpt
	  >

	push #ipmaxh		; IPALLO arg: R0/ size in bytes
	call ipallo		; allocate storage for max size IP header
	pop r0
	bcs 1$			; failed
	mov #-<ipminh/2>,@#impwci	; set DMA word count to size of IP
					; header with no options
	push r0			; save IP header address
	add #ip.beg,r0		; IP header starts here
	call phyadd		; convert to physical address
	mov r1,@#impwai		; set DMA address<0:15>
	bis #igo,r0		; add bits to address<16:17>
	mov r0,@#impist		; issue DMA command
	call iwait		; wait for DMA to complete
	pop r1			; R1: IP header address
	bcs 3$			; IMP reset
	movip.len(r1),r4	; R4: IP packet length
	swab r4			; IP bytes are backward
	cmp r4,r3		; compare packet's and IMP's ideas of length
	if hi,<			; packet claims to be longer than IMP has data
	  bpt			; lose
	  mov r4,r3		; if continued, ask for whole thing
	  >
	sub #ipminh,r3		; subtract header from message length
	sub #ipminh,r4		; ...
	movb ip.ihl(r1),r0	; R0: IP header length in 32 bit words
	bic #177760,r0		; ...
	sub #<ipminh/4>,r0	; subtract what we've already got
	if ne,<			; if there's more
	  neg r0		; negate for interface
	  asl r0		; convert to from 32 bit units to 16 bit units
	  mov r0,@#impwci	; set DMA word count
	  asl r0		; convert from words to bytes
	  add r0,r3		; subtract options length from message length
	  add r0,r4		; ...
	  bis #1,@#impist	; continue DMA
	  call iwait		; wait for completion
	  bcs 3$
	  >
	;; IP header now completely read, read data
	mov r3,r0
	add #iqh.ln+2,r0	; +2 for IMP garbage at end
	push r0
	call ipallo
	pop r0
	bcs 3$
	mov r4,iq.len(r0)
	swab iq.len(r0)		; TCP bytes are backward
	neg r3
	asr r3
	if ne,<
	  dec r3		; +1 word for IMP garbage at end
	  mov r3,@#impwci
	  mov r0,ip.dat(r1)
	  push r1
	  add #iqh.ln,r0
	  call phyadd
	  mov r1,@#impwai
	  bis #igo,r0
	  mov r0,@#impist
	  call iwait
	  bcs 2$
	  >
	call eomchk
	pop r0
	call iprcvp
	jmp quitr1
1$:	call impsoak
	jmp quitr1
2$:	pop r1
	mov ip.dat(r1),r0
	call ipfree
3$:	mov r1,r0		; IPFREE arg: R0/ pointer
	call ipfree		; free IP header
	jmp intsk2		; restart IMP input
.endc	; asmtcp

.if ne asmncp
.sbttl	Low Level Output Process

;;; This process accepts messages and sends them to the IMP.
outtsk:	proc 0,0,<>,<outmsg,outcon,initsp>

	mov sp,initsp(fp)

	;; wait for both host and IMP relays to close
loop <	  cocall
	  bit #6000,@#impist
	  rptl ne
	  >

	mov #nopmsg,r1
	jsr pc,sndhti		;send IMP three nops to make it happy
	jsr pc,sndhti
	jsr pc,sndhti

;;; This is the place where the output task sweeps over the entire world
;;; looking for things to do.  Since it is looking over the entire world
;;; anyway it is responsible for checking all the time outs too.

chkmsg:
.iif ne asmtcp,	call sndip

1$:	call mapare,outare,*	;map in the area for the TCB messages
	mov curtsk,r0
	mov tb.fqm(r0),r1	;get msg ptr in r1
	beq chkhst		;check all hosts for queued msgs
	call print,#s.outr	;we got a msg
	mov ms.nxt(r1),tb.fqm(r0)	;thread the msg out of the queue
	if eq,<clr tb.lqm(r0)>
	jsr pc,catmsg		;categorize this new msg.
	br 1$			;check for more messages


defvar	<
nopmsg:	.word -1		;ms.nxt
	.word ipl.ln-2		;ms.len (won't send msl for NOPs)
	.word 0			;hte
	.word 0			;socket ptr
	.word 0
	.word 1$		;header ptr
	.word 0
1$:	.word 17		;new type leader
	.word 2000		;nop type msg
	.word 0			;host #
	.word 57400		;imp # (95.)
	.word 0
>

chkhst:	mov #hstble,r0		;scan through the host table
1$:	cmpb #h.rsnt,he.sts(r0)	;check time out of rst sent
	bne 5$
	mov clock,r1		;has it timed out?
	sub he.rst(r0),r1
	cmp r1,#rsntto
	blos 5$
	movb #h.dead,he.sts(r0)	;return him to the grave
	inc rtocnt
	br 3$

5$:	bitb #n.rfnm,he.nst(r0)	;is the host rdy for a msg?
	beq 4$			;yes, see if there's a msg
	mov clock,r1
	sub he.rft(r0),r1
	cmp r1,#rfnmto
	blos 3$			;this is validly rfnm waiting.
	bicb #n.rfnm,he.nst(r0)	;un rfnm wait this host
	inc rf0cnt
	clr he.rft(r0)
;	mov he.lms(r0),r1
;	call fremsg,<outare,r1>

4$:	mov he.fqm(r0),r1	;looking for hosts with queued msgs.
	if ne,<			;if zero check next host
	  mov ms.nxt(r1),he.fqm(r0)	;thread this msg out of the list
	  if eq,<clr he.lqm(r0)>
	  dec he.nqm(r0)
	  jsr pc,sndhhz		;send host-to-host link zero msg
	  >
3$:	add #hte.ln,r0
	cmp r0,#hstend
	blo 1$			;check for msgs

chkskt:	mov #sktble,r0		;now check through all the sockets
14$:	cmpb sk.sts(r0),#s.clsg	;check TOs.  If the user closed but it
	 			;timed out, simulate a close comming
	 			;back.
	bne 12$
	mov clock,r1
	sub sk.ctm(r0),r1
	cmp r1,#clsgto
	blos 13$
	movb #s.free,sk.sts(r0)	;make the socket free
	inc ctocnt
	call hstdwn,<sk.hst(r0),#scemto>	;mark the host as down
	jmp 7$

12$:	cmpb sk.sts(r0),#s.opng	;did the guy fail to respond to RFC?
	bne 13$
	mov clock,r1
	sub sk.ctm(r0),r1
	cmp r1,#opngto
	blos 13$
	movb #s.clsd,sk.sts(r0)	;make the socket closed
	inc otocnt
	call hstdwn,<sk.hst(r0),#scemto>	;mark the host as down
	jmp 7$

13$:	bitb #n.rfnm,sk.nst(r0)
	beq 1$
	mov clock,r1
	sub sk.rft(r0),r1
	cmp r1,#rfnmto
	bhi 16$			;rfnm waiting so go to next socket
	jmp 7$
16$:	bicb #n.rfnm,sk.nst(r0)
	inc rf1cnt
	clr sk.rft(r0)
;	mov sk.lms(r0),r1
;	call fremsg,<outare,r1>	;free the message if any.

1$:	cmpb sk.sts(r0),#s.open	;make sure socket is open
	bne 7$
	bit #1,sk.mys(r0)	;make sure it is a transmit socket
	bne 10$
	bitb #n.sdal,sk.nst(r0)	;if recieve socket does he need alloc?
	beq 7$			;no
	call sndalc,r0		;send him some
	bcs 7$			;still no allocation to send
	bicb #n.sdal,sk.nst(r0)	;he has been taken care of
	br 7$
10$:	mov sk.fqm(r0),r1	;get msgs queued on this socket
	beq 7$			;no msgs, try next socket
	tst sk.nms(r0)		;is there a msg allocation?
	beq 7$			;nope
	movb sk.siz(r0),r3	;we must have at least 1 byte of bits
	bit #7,r3		;see if the byte size is reasonable
	beq 11$
	bpt
11$:	tst sk.bsh(r0)		;is there enough bit allocation?
	bne 2$			;yes
	cmp sk.bsl(r0),r3
	blo 7$			;not enough for even one byte
2$:	mul ms.nby(r1),r3	;get msg size in bits
	cmp r3,#8000.		;we want min(msg-len,8000,allocation)
	ble 3$
	mov #8000.,r3
3$:	tst sk.bsh(r0)
	bne 4$			;plenty of bit allocation
	mov sk.bsl(r0),r4
	bic #17,r4		;round allocation to 16 bits
	cmp r3,r4
	blos 4$
	mov r4,r3
4$:	tst r3			;now min's in r3 and we want to figure
	beq 7$
	clr r2
	movb sk.siz(r0),r4	;out how many sk.siz-bit bytes to send
	div r4,r2		;r2 get quotient (number of bytes)
	mov r4,r3		;get bits rounded to nearest byte
	mul r2,r3

	push r2
	push r3
	mov ms.hsb(r1),r2	;move the header if necessary
	beq 9$			;not on this msg
	mov ms.hdr(r1),r3
	cmp r2,r3		;is header already in the right place
	beq 9$			;yup.
	mov r2,ms.hdr(r1)	;they will be the same
	add #ipl.ln+hsl.ln,r2	;copy from end to beginning so overlap
	add #ipl.ln+hsl.ln,r3	;comes out right
8$:	movb -(r3),-(r2)
	cmp r2,ms.hsb(r1)	;are we there yet?
	bhi 8$
9$:	pop r3
	pop r2

	dec sk.nms(r0)		;we are committed, use up allocation
	sub r3,sk.bsl(r0)
	sbc sk.bsh(r0)
	ash #-3,r3		;r2 is n-bit bytes, r3 is 8-bit bytes
	mov ms.hdr(r1),r4
	mov r2,ipl.ln+hl.nby(r4)	;fill in the host-to-host field
	mov r3,ms.len(r1)	;tell sndhti how much to send.
	add #<ipl.ln+hsl.ln>,ms.len(r1)
	sub r2,ms.nby(r1)	;update number of bytes left
	if ne,<			;are we done with this yet?
	  add r3,ms.hsb(r1)	;where the header will be next time
	  jsr pc,sndhhn		;send host-to-host non-zero link msg
	  >
	else <			;we are done, unthread the msg
	  dec sk.nqm(r0)	;one less msg queued
	  mov ms.nxt(r1),sk.fqm(r0)	;thread msg out of queue if done
	  if eq,<clr sk.lqm(r0)>
	  jsr pc,sndhhn		;send host-to-host non-zero link msg
	  call fremsg,<outare,r1>
	  >
7$:	add #skt.ln,r0		;go to next socket
	cmp r0,#sktend
	bhis 15$
	jmp 14$

15$:	cocall			;we are all out of things to do
	jmp chkmsg

catmsg:	mov ms.skp(r1),r2	;is there a socket for this msg?
	if ne,<
	  cmpb #s.open,sk.sts(r2)	;is the connection still open?
	  if ne,<		;no, flush the msg and return
	    call fremsg,<outare,r1>
	    rts pc
	    >
	  mov sk.lqm(r2),r3
	  if eq,<
	    mov r1,sk.fqm(r2)
	    >
	  else <
	    mov r1,ms.nxt(r3)
	    >
	  mov r1,sk.lqm(r2)	;NOTE: we don't inc sk.nqm since that is done
				;by hhdsnd to avoid losing packets in the mill.
	  br 8$
	  >
	mov ms.hst(r1),r2	;is there a host specified for this?
	if eq,<			;no, this is a host to imp message
	  jsr pc,sndhti		;just send it
	  call fremsg,<outare,r1>	;free the message
	  rts pc
	  >
	;; do the host to host stuff
	mov he.lqm(r2),r3
	if eq,<
	  mov r1,he.fqm(r2)
	  >
	else <
	  mov r1,ms.nxt(r3)
	  >
	mov r1,he.lqm(r2)
	inc he.nqm(r2)		;update count of queued msgs

8$:	clr ms.nxt(r1)		;last msg has no next
	makptr r1,ms.txt,r2	;get ptr to imp leader
	mov r2,ms.hdr(r1)	;initialize the headers
	mov r2,ms.hsb(r1)
	rts pc

;;; This routine sends a host to host message on a non-zero link to the IMP.
;;; r1 contains the message ptr, r0 contrains the socket ptr that the msg
;;; is being sent on.

sndhhn:	push r2,r3
	bisb #n.rfnm,sk.nst(r0)
	mov ms.hdr(r1),r3	;get ptr to header
	clrb il.dsn(r3)
	clrb il.flg(r3)
	clrb il.typ(r3)
	clrb il.hdl(r3)
	clrb il.stp(r3)
	movb sk.lnk(r0),il.lnk(r3)
	mov sk.hst(r0),r2	;get hte to fill in host parameters
	movb he.hst(r2),il.fhs(r3)
	mov he.imp(r2),il.fip(r3)
	swab il.fip(r3)
	movb sk.siz(r0),ipl.ln+hl.bsz(r3)
	swab ipl.ln+hl.nby(r3)	;they want the bytes backwards
	jsr pc,sndhti		;now just send it out normally
	mov r1,sk.lms(r0)	;save last msg for debugging
	add #1,rf1snt
	adc rf1snt+2
	mov clock,sk.rft(r0)
	pop r3,r2
	rts pc

.if ne asmtcp

impxmt:	mov r0,@ipolse
	mov r0,ipolse
	preturn

sndip:
loop <    mov ipolst,r1
	  exitl eq
	  mov (r1),ipolst
	  if eq,<
	    mov #ipolst,ipolse
	    >
	  mov #ipilbf,r0
	  movb ip.dst+1(r1),il.fhs(r0)
	  mov ip.dst+2(r1),il.fip(r0)
	  mov ip.len(r1),r2
	  swab r2
	  ash #3,r2
	  swab r2
	  mov r2,il.msl(r0)
	  mov #lipilbf/2,r2
	  call sndim0
	  mov r1,r0
	  add #ip.beg,r0
	  movb ip.ihl(r1),r2
	  bic #177760,r2
	  asl r2
	  mov ip.dat(r1),r3
	  mov iq.len(r3),r4
	  if eq,<
	    call sndimp
	    >
	  else <
	    call sndim0
	    mov r4,r2
	    swab r2
	    inc r2
	    asr r2
	    mov r3,r0
	    add #iqh.ln,r0
	    call sndimp
	    >
	  mov r1,r0
	  call ipdisc
	  rptl
	  >
	preturn

defvar <
ipolst:	.word 0
ipolse:	.word ipolst

ipilbf:	.byte 17		; format = new leader
	.byte 0			; destination network
	.byte 0			; flags
	.byte 0			; type 0
	.byte 0			; handling type
	.byte 0			; host number
	.word 0			; IMP number
	.byte iplink		; link number
	.byte 0			; subtype
	.word 0			; message length in bits
lipilbf==.-ipilbf
.iif ne lipilbf-ipl.ln,	.error IPILBF wrong length
>
.endc	; asmtcp

;;; This routine sends host to host messages on link zero to the IMP.  Upon
;;; entry r1 points to the message.

sndhhz:	push r2
	clrb msg.ln+il.dsn(r1)
	clrb msg.ln+il.flg(r1)
	clrb msg.ln+il.typ(r1)
	clrb msg.ln+il.hdl(r1)
	clrb msg.ln+il.stp(r1)
	clrb msg.ln+il.lnk(r1)
	mov ms.hst(r1),r2	;get hte to fill in host parameters
	movb he.hst(r2),msg.ln+il.fhs(r1)
	mov he.imp(r2),msg.ln+il.fip(r1)
	swab msg.ln+il.fip(r1)
	movb #8.,msg.ln+ipl.ln+hl.bsz(r1)
	mov ms.nby(r1),msg.ln+ipl.ln+hl.nby(r1)
	swab msg.ln+ipl.ln+hl.nby(r1)	;they want the bytes backwards
	bisb #n.rfnm,he.nst(r0)
	jsr pc,sndhti		;now just send it out normally
	mov r1,he.lms(r0)
	call fremsg,<outare,r1>
	inc rf0snt
	mov clock,he.rft(r0)
	pop r2
	rts pc

;;; This routine is called to send messages to the IMP.  It is called by
;;; sndhhn and sndhhz among others.  R1 contains a ptr to the message
;;; to send.  It bashes r2 and r3.

sndhti:	push r0
	mov ms.hdr(r1),r0	;get header ptr
	movb #17,il.fmt(r0)
	mov ms.len(r1),r2
	inc r2			; convert to words
	asr r2			; ...
	jsr pc,sndimp
	call atring,<#outlst,r1>	;keep all output msgs in a ring buffer
	mov r1,lstmsg
	call print,#s.asnt
	pop r0
	rts pc
.endc

;;; Transfer data to IMP.  R0/ pointer, R2/ word count.
sndim0:	push r1			; save register
	;; wait for IMP ready
loop <	  tstb @#impost
	  exitl ne
	  cocall
	  rptl
	  >
	call phyadd		;convert virtual address in R0 to physical
				; address in R1 and R0
	mov r1,@#impwao		;tell the interface
	neg r2			;tell the imp how many words
	mov r2,@#impwco
	bis #ogo,r0
	mov r0,@#impost
	pop r1
	preturn


;;; Transfer data to IMP.  R0/ pointer, R2/ word count.
sndimp:	push r1			; save register

	;; wait for IMP ready
loop <	  tstb @#impost
	  exitl ne
	  cocall
	  rptl
	  >

	call phyadd		;convert virtual address in R0 to physical
				; address in R1 and R0
	mov r1,@#impwao		;tell the interface
	neg r2			;tell the imp how many words
	mov r2,@#impwco
	bis #ogo+oweom,r0
	mov r0,@#impost

	;; wait for it to be sent (some routines free the message after we
	;; return).
loop <	  cocall
	  tstb @#impost
	  rptl pl
	  >
	tst @#impost		; any error bit set? (NXM is only one)
	if mi,<			; yes
	  bpt
	  >
	bit #1000,@#impost	; relay error?
	if ne,<			; yes
	  call printa,#s.orer
	  >

	pop r1			; restore register
	rts pc

.if ne asmncp
.sbttl  Various Support Routines

;;; gethte (imp-leader) (hte)
;;; this routine is called with a pointer to an imp leader and returns
;;; a pointer to the appropriate host table entry.
gethte:	proc 1,1,<r0,r1>

	mov arg1(fp),r0		;get our argument: ptr to imp leader.
	mov il.fip(r0),r1	;get the word representing imp number
	swab r1			;words come in backwards.
	movb il.fhs(r0),r0	;get the foreign host number
	bic #177400,r0

	call makhte,<r1,r0>,out1(fp)
	tst out1(fp)
	bne 1$
	bpt 			;blow out if failure
1$:	return

;;; makhte (imp, host) (hte)
;;; this routine creates and/or returns an hte for the imp/host specified.
makhte:	proc 2,1,<r0,r1,r2>

	clr out1(fp)		;no known empty host table entries.
	mov arg1(fp),r1		;get imp
	mov arg2(fp),r0		;get host
	mov #hstble,r2		;start looking through the host table
4$:	cmpb he.hst(r2),r0	;does the host # match?
	bne 2$			;no
	cmp he.imp(r2),r1	;how about the imp #?
	beq 1$			;got a match so return it
2$:	tstb he.cnt(r2)		;if this is empty remember for later.
	bne 3$			;some one has it already
	bitb #n.rfnm,he.nst(r2)	;but is it waiting for rfnm?
	bne 3$			;its waiting so can't gc it yet.
	mov r2,out1(fp)		;this can be gc'ed if no match
3$:	add #hte.ln,r2		;in any case go to next hte.
	cmp r2,#<hte.ln*nhosts+hstble>	;past end?
	blo 4$			;no, keep looking

	mov out1(fp),r2		;use the empty one if no match found
	if eq,<rtnerr>		;no free ones either.
	movb r0,he.hst(r2)
	mov r1,he.imp(r2)
	movb #h.dead,he.sts(r2)	;initialize host status
;	mov #htearp,he.are(r2)	;set up the area pointer for the HTE

1$:	mov r2,out1(fp)
	return

.sbttl Routines to hack msgs scattered to the wind

;;; These are the subroutines that manage the mapping in of areas containing
;;; messages.  The general arrangement is that each socket, host table entry,
;;; the tcbncp, intcb and tcbout are assigned an area for the messages chained
;;; off them.  In addition there is the standard area which is in a section
;;; of the address space which is always mapped in and available to every
;;; task.  The format of an area pointer is a word whose high byte is the NM
;;; page number of the area and the low byte is the offset in that page in
;;; units of 16. words.  Thus 1_8+3 as an area pointer is NM page 1, and
;;; word 3*16.=48. (byte 96.)  Note that some operations on the standard area
;;; are illegal.

fremap: proc 1,0,<r1>		;free a message in the active area given ptr
	mov arg1(fp),r1		;get pointer to message
	cmp ms.nxt(r1),#-1	;should we not free this message?
	if ne,<
	  cmp r1,#maplo		;is this msg in the std area?
	  if lo,<		;if so then
	    push #bgarea	;use standard area
	    >
	  else <
	    push #mapdar	;get address of the mapped area
	    >
	  push r1
	  call free		;free the message
	  >
	return			;we are all done here

fremsg:	proc 2,0,<r0,r1>	;free a msg given area ptr and address
	mov arg2(fp),r1		;get address of msg
	cmp arg1(fp),stdare	;standard area?
	if eq,<
	  cmp #-1,ms.nxt(r1)	;don't free flag set?
	  if ne,<		;then don't free
	    push #bgarea,r1
	    call free
	    >
	  >
	else <
	  pushp6
	    call mapare,arg1(fp),r0	;map in the area, get address of the area
					; into r0 for freeb
	    cmp #-1,ms.nxt(r1)	;don't free flag set?
	    if ne,<
	      push r0,r1
	      call free
	      >
	  popp6
	  >
	return

allmsg:	proc 2,1,<r1>		;allocate a message in an area, map it in
	cmp arg1(fp),stdare	;allocate in standard area?
	if eq,<			;if so then we use it, no need to map
	  mov #bgarea,r1	;get address of the area
	  >
	else <
	  call mapare,arg1(fp),r1	;map in the area, ptr in r1
	  >
loop  <	push r1,arg2(fp)
	inc (sp)		; convert to words
	asr (sp)
	call alloc		;attempt to allocate
	pop out1(fp),*
	exitl eq
	cocall			;wait for more room
	rptl
	>
	return

;;; mapare takes an area, maps it in and returns a pointer to its base.

mapdar==maplo			; we are using the entire mapped page as
				; an area

crmpar:	proc 0,1,<r0,r1>	; initialize the area in the mapped page
	call getpag,<>,out1(fp)	;get a newman page for the tcb area
	if cs,<rtnerr>
	map out1(fp)
	push #mapdar,#mapdar+larea,#mapdar+pagsiz
	call fsinit
	return

mapare:	proc 1,1,<r0>		;map in an area given area pointer
	mov arg1(fp),r0		;get the area pointer
	beq 1$			;zero is not a legal area pointer
	cmp r0,stdare		;is this the standard area?
	if eq,<
1$:	  bpt			;no one should ever do this
	  >
;	mov r0,curpag		;save this information away
	map r0			;map into the 3rd NM window
	mov #mapdar,out1(fp)	;return the address of the mapped area
	return

;;; movmsg (area, msgptr)
;;; Move a message currently mapped in to a new area.  Return the new
;;; message pointer and the new area mapped in.

movmsg:	proc 2,1,<r0,r1,r2,r3,r4>
	mov arg2(fp),r0		;get pointer to the original msg
	mov r0,out1(fp)		;in the easy case just return the old message.
	mov -2(r0),r4		;get the size of the message
	bic #140000,r4
	sub #fsmovh,r4
	asl r4			;convert to bytes
	cmp r0,#maplo		;is source message in mapped memory?
	if lo,<			;no, then must be in standard area
 	  cmp arg1(fp),stdare	;are we attempting to move to the std area?
	  beq 2$		;yes, return
1$:	  ;; copy from mapped to unmapped memory or vice versa
	  call allmsg,<arg1(fp),r4>,r2
	  mov r2,out1(fp)	;return the block
	  inc r4		;round up to nearest word
	  asr r4
  loop	  < mov (r0)+,(r2)+	;move from old msg to new
	    sorl r4
	    >
	  call fremap,arg2(fp)	;free the old message
	  >
	else <			;source message is in mapped memory
	  cmp arg1(fp),stdare	;going to the standard area?
	  beq 1$		;yes, do common code
	  ;; copy from one mapped area to another
	  rmap r1		; get the current mapping value
	  cmp r1,arg1(fp)	;areas eq?
	  if ne,<		;no
	    call allmsg,<arg1(fp),r4>,r2
				;get new msg. Note that our storage allocator
				; puts size in the word before the block of
				; storage.  We are also now in the new area.
	    mov r2,out1(fp)	;return pointer to user
	    rmap r3		;page address for new area in r3
	    inc r4		;round up
	    asr r4		;round to words

;;; We are now all set to move the message.  We have a pointer to the old
;;; message in r0, the old page in r1, the new message in r2, the new page in
;;; r3.  The length in words of the message is in r4.  We now move the msg.

	    push r5		;save the fp, we need the register right now
  loop	    < map r1		;map in the old page
	      mov (r0)+,r5	;pick up a word
	      map r3		;map in the new page
	      mov r5,(r2)+	;place word into new message
	      sorl r4		;loop
	      >
	    pop r5		;get r5 back
	    call fremsg,<r1,arg2(fp)>	;free the old message
	    >
	  >
2$:	return			;all done
.endc	; asmncp

.if ne asmncp

;;; atring (ring-buffer, item)
;;; add-to-ring-buffer takes and object and pushes it on a ring buffer.
dsect <
rg.cep:: .blkw 1		;this is a pointer to the next slot to be used.
rg.cnt:: .blkw 1		;this is the size of the ring buffer in bytes.
rg.slt:: .blkw 0		;here start rg.cnt/2 ring buffer slots.
	>,rng.ln

atring:	proc 2,0,<r0,r1,r2>

	mov arg1(fp),r0
	beq 1$			;punt!
	mov rg.cep(r0),r1	;get the buffer ptr.
	cmp r1,r0
	blo 1$			;must be larger than the header ptr.
	mov r0,r2		;make a ptr to the end of the ring buffer.
	add rg.cnt(r0),r2
	add #rng.ln,r2
	cmp r1,r2		;compare the cep with the buffer end
	blo 2$			;ok to use.
	bhi 1$			;over stepped!
	mov r0,r1		;wrap to first element of buffer.
	add #rg.slt,r1
2$:	mov arg2(fp),(r1)+
	mov r1,rg.cep(r0)	;save the new entry ptr
	return

1$:	bpt
	br 1$

;;; lnkskt (receive-link-number, hte) (socket-ptr)
;;; this routine takes a link number and an hte for the message and
;;; converts it to a socket ptr with error checking.  this is
;;; only good for receive links.
lnkskt:	proc 2,1,r0

	mov arg1(fp),r0		;get link number (first argument)
	asl r0			;for index
	sub #lnkbas,r0		;all my links will be greater than 8#24
	cmp r0,#nlinks*2	;is this a real link?
	bhis lnkbad		;illegal link return zero
	mov lnktbl(r0),r0	;get corresponding socket ptr
	beq lnkbad		;no one is using this link
	cmpb #s.free,sk.sts(r0)	;is the socket still existing?
	beq lnkbad
	cmp arg2(fp),sk.hst(r0)	;was the message from the right host?
	bne lnkbad
	cmpb arg1(fp),sk.lnk(r0)	;internally consistant?
	bne conbad
	tst sk.own(r0)		;anyone own this connection?
	beq conbad
	mov r0,out1(fp)
lnkrtn: return

conbad: bpt
;	br lnkbad

lnkbad: clr out1(fp)
	br lnkrtn

;;; lnkscn (transmit-link-number, hte) (socket-ptr)
;;; this scans the socket table for a transmit connection to the specified
;;; host on the specified link and returns the socket-ptr.
lnkscn:	proc 2,1,<r0,r1,r2>

	mov arg1(fp),r0		;get the link
	beq 1$			;return nothing
	mov arg2(fp),r2		;get the hte.
	beq 1$			;is it valid?

	mov #sktble,r1		;prepare to scan socket table for this link
4$:	cmp sk.hst(r1),r2	;from the right host?
	bne 6$			;no, go to next socket
	cmpb sk.lnk(r1),r0	;right link to right host?
	bne 6$			;no
	bit #1,sk.mys(r1)	;is it a transmit socket?
	beq 6$			;if even (receive) keep looking
	mov r1,out1(fp)
2$:	return
6$:	add #skt.ln,r1		;step to next socket.
	cmp r1,#sktend		;are we out of sockets?
	blo 4$			;keep looking
1$:	clr out1(fp)
	br 2$

;;; getmsg returns in r2 the next message in the current users queue.
;;; if no messages are available then the routine waits until one
;;; shows up.  The message is threaded out of the queue but not freed
;;; the caller must do that explicitly.
getmsg:
	push r0
	mov curtsk,r0
1$:	mov tb.fqm(r0),r2	;get first message
	bne 2$
	cocall
	br 1$
2$:	call mapare,tb.are(r0),*	;make sure the message is addressable
	mov ms.nxt(r2),tb.fqm(r0)	;get next msg ptr
	bne 3$
	clr tb.lqm(r0)		;no msgs left.
3$:	pop r0
	rts pc

;;; putmsg takes a tcb pointer in r3 and a message pointer in r2 and
;;; threads the message into the queue for that process.
putmsg:
	pushp6
	  push r0
	  call movmsg,<tb.are(r3),r2>,r2	;map the message into TCB area
	  mov tb.lqm(r3),r0
	  mov r2,tb.lqm(r3)	;this msg is the new last
	  clr ms.nxt(r2)	;last msg has no next
	  tst r0		;is there an old last?
	  bne 1$		;yes
	  mov r2,tb.fqm(r3)	;if not then msg is first AND last
	  br 2$
1$:	  mov r2,ms.nxt(r0)	;last msg is next msg of old last
2$:	  pop r0
	popp6
	rts pc
.endc	; asmncp

.sbttl  Strings of various types

s.gret: .asciz	/NCP Machine Running
/
s.gotm: .asciz	/imp: /
s.endm:	.asciz	/** /
s.grfn: .asciz	/RFNM /
s.srfn: .asciz	/(spurious)
/
s.noal:	.asciz	/insufficient allocation
/
defvar <
s.glos: .ascii	/msg incomplete, sub type #/
s.losn:	.asciz	/0.
/
s.lerr: .ascii	/leader error, sub type #/
s.errn: .asciz	/0.
/
	.even
>
s.hrst: .asciz	/host reset
/
s.typ0: .asciz	/type zero /
s.outr: .asciz	/outtsk: msg ** /
s.asnt: .asciz	/outtsk: sent ** /
ldrmsg:	.asciz "IMP leader error
"
badlnk:	.asciz "Non-existent link
"
shrtms:	.asciz "IMP message too short
"
longms:	.asciz "IMP message too long
"
s.ryer:	.asciz "IMP or Host relay openned during input DMA
"
s.orer:	.asciz "IMP or Host relay openned during output DMA
"
.even

defvar	<
clrdat::

rtocnt:	.word 0			; # of RST timeouts
ctocnt:	.word 0			; # of unreciprocated closes
otocnt:	.word 0			; # of RTS or STRs not responded to
rf0cnt:	.word 0			; # of RFNMs on link zero lost
rf1cnt:	.word 0			; # of RFMNs on non zero links lost
rf0cam:	.word 0			; # of rfnms received on link zero
rf1cam:	.word 0			; # of rfnms received on non zero links
rf0snt:	.word 0			; # of msgs sent on link zero
rf1snt:	.word 0,0		; # of msgs sent on non zero links
rf0rcv:	.word 0			; # of link zero msgs received
rf1rcv:	.word 0,0		; # of msgs received on non zero links

sprfnm:	.word 0			; # of spurious rfnms
noaloc:	.word 0			; # of msgs recieved without msg allocation 
ncpgar:	.word 0			; # of garbage packets received by NCP
spurrp:	.word 0			; # of spurious rrp
nignor:	.word 0			; # of h-h commands ignored by the NCP

hhlock:	.word 0			; hhsend uses impure data so only one task
				; at a time can be in these routines.
openmc:	.word 0			; signal to open connection to MC
alowst:	.word 0			; signal to allow incomming users
outalc:	.word

msgcnt:	.word 0,0,0,0,0,0,0,0,0,0,0

clrend::

lstmsg:	.word nopmsg		;last output buffer

inplac:	.word 0


lderrs:	.word .+4
	.word 2*5.
	.blkw 2*5.

rserrs:	.word .+4
	.word 2*5.
	.blkw 5.

outlst:	.word .+4
	.word 2*5.
	.blkw 5.


;;; Link, host, and socket tables.

lnktbl:	.blkw nlinks		; link to socket association table
lnkend::
hstble: .blkb nhosts*hte.ln 	; host table entries
hstend::
sktble: .blkb nskts*skt.ln 	; space for active socket info
sktend::

>				; end of defvar
