; Printer Server support -*-palx-*-

.sbttl User level Chaos Printer Server


dsect <
	 .blkb ltcb		; the task which sends out server messages
lpttsk:: .blkb ltcb		; the listener task
lpdest:: .blkw 1		; ptr to destination obj for output chars
ledest:: .blkw 1		; ptr to destination obj for error messages
lfldst:: .blkb ldptcl		; the destination object port for flow control
lflowv:: .blkw 1		; non-zero means waiting on flow control
lchcnt:: .blkw 1		; count of chars left in ETX ack protocol
lfilef:: .blkw 1		; file state, + processing file, 0 no
				; file, - EOF, -2 user forcibly terminated
lsrvms:: .blkw 1		; max message level reached
lsend::	 .blkw 1		; routine to use to send to printer
vbufpt:: 0	;command control flag
vpit::	 0	;vertical pitch
hpit::	 0	;horizontal pitch
lmar::	 0	;left margin
rmar::	 0	;right margin
tabi::	 0	;tab increment
flen::	 0	;form length
tmar::	 0	;top margin
bmar::	 0	;bottom margin
uname::	 0	;ptr to name string
namlen:: 0	;length of name string
title::	 0	;ptr to title string
titlen:: 0	;length of title string
head::	 0	;header flag
lincnt:: 0	;lines printed on this page
linmax:: 0	;max lines allowed on page
maxcol:: 0	;max columns allowed on line
pcol::	 0	; number of spaces preceeding page #
pageno:: 0	;main page number
pagesn:: 0	;sub page number
canonf:: 0	;canon flag
cscant:: 0,0	;temps for the option scanner
tabtmp:: 0	;temp for the tab group counter
vctlbf:: .blkb	200.
vctlbe==.
	.word	0,0
	>,llpobj


;;; Initialize LPT server
;;; R5 -> our parameter, the port the LPT is on
lptsin:	mov (r5)+,r1		; get port number
	asl r1
	mov (r5)+,r4		; get port # for error messages
	mov sport(r1),r2	; get source port
	if eq,<
	  tst (sp)+
	  br 1$
	  >
	mov dport(r1),r3	; get destination port

	push #llpobj		; ALLOCW arg: number of bytes to allocate
	call allocw
	mov (sp),r0		; save a copy of pointer to lpt object
	mov (r5)+,canonf(r0)	; set canon flag

	push #chsrvr,#50.	; TINIT args: ptr to TCB (already on
				; stack), initial PC, stack size
	call tinit		; initialize server task

	push r0			; TINIT args: ptr to TCB, initial PC,
	add #lpttsk,(sp)	; stack size
	push #chgetd,#70.
	call tinit		; initialize printer task

	mov r3,lpdest(r0)	; remember our lpt output destination
	asl r4			; error message port #
	mov dport(r4),ledest(r0)

	mov r0,r1		; make ptr to flow control dest
	add #lfldst,r1		; prepare for profligate waste of memory
	mov #"LS,name(r1)	; fill in name
	mov #lpgetc,send(r1)	; send entry
	mov #lpgetc,sendw(r1)
	mov #nopsub,sends(r1)
	mov #lpbrk,break(r1)
	mov #nopsub,force(r1)
	mov #nopsub,close(r1)
	mov r2,r0		; our source port
	call @link(r0)		; link source to lfldst

1$:	return

;;; destination objects send and sendw entry point
lpgetc:	bic #177600,r1		; clear parity
	cmpb r1,#6		; is it an ack?
	if eq,<
	  dec lflowv-lfldst(r0)	; if so, indicate we've recieved one
	  >
	cmpb r1,#'Q-100		; ^Q?
	if eq,<
	  clr lflowv-lfldst(r0)	; clear flow control
	  >
	cmpb r1,#'S-100		; ^S??
	if eq,<			; yes, stop output
	  mov #2.,lflowv-lfldst(r0)
	  >
	cmpb r1,#7		; ^G?
	if eq,<
	  mov #-2,lfilef-lfldst(r0)	; set abort flag
	  clr lflowv-lfldst(r0)	; get user past flow control in case he's
				; already looping to send something
	  >
	return

lpbrk:	mov #-2,lfilef-lfldst(r0)
	return


;;; output a character of an error message
errchr:	push r0			; save r0
	mov ledest(r0),r0	; get
	if ne,<
	  call @sendw(r0)
	  >
	pop r0
	return

errstr:	push r2	
	mov (r5)+,r2
loop <	  movb (r2)+,r1
	  exitl eq
	  call errchr
	  rptl
	  >
	pop r2
	rts r5

.macro echcns string
	jsr r5,errstr
	 .string ^string
.endm

.macro ech ch
	mov ch,r1
	call errchr
.endm

; LPTERR macro - used to report server errors.
; Args:
; level  - the progress level of the error message.  Stored in SRVMSG.
;	   Print out error iff progress level greater than SRVMSG.
;	   Prevents spewing out infinite messages about problems that
;	   Havn't corrected themselves.
; msg    - the message to print
; packet - a packet, the data portion of which might contain a message

.macro lpterr level,msg,packet
       tst lfilef(r0)		; don't interrupt a file
       if eq,<
	 cmp #level,lsrvms(r0)	; have we been here before
	 if hi,<
	   mov #level,lsrvms(r0)	; indicate we've gotten this far
	   echcns ^"
error: "			; standard starting form
	   echcns ^\msg\	; the user's message

	   .if nb packet
	   push packet
	   jsr pc,pktprt	; share the code
	   .endc

	   ech #3			; indicate the end of the error message
	   >
	 >
.endm
; Prints a packet given packet ptr on stack
pktprt:	   push r2,r5
	   tst 6(sp)
	   if ne,<
	     mov 6(sp),r2	; point R2 at data
	     mov pklen(r2),r5	; get length of failure message
	     bic #pkfcnt,r5	; mask down to just char count
	     if ne,<		; if there is any data
	       add #pkdat,r2
    loop <       movb (r2)+,r1	; get a char
		 bic #177600,r1	; don't send any 8 bit nasties 
		 call errchr	; put it out
		 sorl r5  
		 >
	       >
	     >
	   pop r5,r2,(sp)	; restore regs, return address
	   rts pc

.sbttl Server Process

chsrvr:	
	mov ctask,r0		; get pointer to our object
	clr lsrvms(r0)
	clr lfilef(r0)		; start out with no file open
	mov #1,r5		; fall through delay llop quicly first time.
loop <	  ; open connection to Arpa machine and tell it we want to get ICP's
	  ; for either socket 101 or socket 103 octal.
  loop <    jsr pc,resced	; delay loop; drop thru for new file
	    tst lfilef(r0)	; has a file been just been closed?
	    exitl mi		; then send out another server command
	    sorl r5
	    >
	  push #21_8.+4,#1
	  tst canonf(r0)
	  if eq,<
	    push #svr101
	    >
	  else <
	    push #svr103
	    >
	  call chopen
	  pop r3
	  if cs,<		; if open failed
	    lpterr 1,^"Arpa machine not responding",r3
	    push r0		; free any possible close packet
	    mov r3,r0
	    call frepck
	    pop r0
	    mov #10000.,r5	; retry in about 30 seconds
	    rptl
	    >			; end open failed conditional

	  ; open succeeded, now try to read data packet for response
 loop <	    jsr pc,resced	; pause an instant
	    push r3		; CHDATI arg: connection
	    call chdati		; get a reply  back
	    pop r4		; CHDATI result: packet or 0
	    if cs,<		; nothing there
	      cmpb #%csopn,cnstat(r3)	; because the connection closed on us?
	      rptl eq		; no, keep on trying
	      br 1$		; closed out from under, print cls packet..
	      >
	    >
	  cmpb pkop(r4),#200	; success?
	  if ne,<		; failure
	    cmpb pkop(r4),#202	; temp failure?
	    if eq,<
	      mov #1200.,r5	; retry on 4 second time scale
	      br cretry
	      >
	    cmpb pkop(r4),#203	; duplicate server?
	    if eq,<		; yes, but still rebook every 90 secs or so
	      mov #30000.,r5
	      br cretry
	      >
1$:	    lpterr 2,^"(while trying to open Arpa machine) ",r4
	    mov #6000.,r5	; strange type of reply..
	    >			; end failure conditional
	  else <		; success received in response to server
	    clr lsrvms(r0)	; if we get an error next time print it again
	    mov #30000.,r5	; success has the slowest retry period (90 sec)
	    >
cretry:	  push r0		; don't smash our R0
	  mov r4,r0		; need ptr to data (or close) packet in R0
	  call frepck		; free it
	  pop r0		; restore our own R0
	  push r3,#0		; CHCLS args: connection, reason - close our end
	  call chcls
	  rptl
	  >

.sbttl Printer Driver Task

chgetd:	mov ctask,r0
	sub #lpttsk,r0
loop <	jsr pc,resced		; let someone else run
	clr lfilef(r0)		; make sure we think havn't started a file yet
	; listen for connections on the printer socket
	tst canonf(r0)		; listen on different contact names
	if eq,< push #conprn >	; for canon and printer
	else < push #concan >
	push #0
	call chlsn
				; CHLSN: Contact name, type (do not create task),
				;	 connection type, connection
 	pop r2,r3		; get return values
	rptl cs			; if failed, must've been due to memory
	push r2,r3,#1		; CHRPLY args: connection type, connection,
				; window size
	call chrply
	if cs,<			; if chrply fails, close and try again
	  push r3,#0		; CHCLS args: connection, reason
	  call chcls
	  rptl
	  >

;new file starts here

	tst canonf(r0)
	if eq,<
	  push #vrdr		;set up for coroutine
	  >
	else <
	  push #crdr		; canon co-routine
	  >
	mov #1,lfilef(r0)	; set file state to starting
	clr lflowv(r0)
	mov #60,lchcnt(r0)
  loop <  jsr pc,resced
	  tst lfilef(r0)	; has user flushed?
	  bmi chgcls		; yes, close connection
	  push r3		; CHDATI arg: connection
	  call chdati
	  pop r4		; CHDATI result: data packet
	  if cs,<
	    cmpb #%csopn,cnstat(r3)	;see if connection is still open
	    rptl eq		; still open, loop for more data
	    push r0		; free any possibly error packet
	    mov r4,r0
	    call frepck
	    pop r0
chgcls:	    push r3,#0
	    call chcls		; CHCLS args: connection, reason
	    jsr pc,resced	; for flush case: let buffered chars empty
	    clr lfilef(r0)	; end of file
	    exitl		; for now, don't bother with reasons
	    >
	  mov pklen(r4),r5	; get char count of data in packet
	  bic #pkfcnt,r5	; mask down to just char count
	  rptl eq		; ignore if zero
	  mov r4,r2		; don't smash ptr to packet for debugging reasons
	  add #pkdat,r2		; point R2 at data
     loop < movb (r2)+,r1	; get a char
	    bic #177600,r1
	    jsr pc,@(sp)+	; go to reader/handler of chars
	    tst lfilef(r0)
	    exitl lt		;check for user termination here also
	    sorl r5
	    >
	   push r0
	   mov r4,r0		; packet ptr
	   call frepck		; free the data packet
	   pop r0
	   rptl			; get another data packet
	   >
	 tst canonf(r0)
	 if ne,<
	   mov #14,r1
	   call @lsend(r0)
	   >
	 pop *			; get rid of coroutine word on stack
	 mov #-1,lfilef(r0)	; flag to tell server side we're ready again
	 rptl			; listen for another printer connection
	 >

.sbttl Canon printing loop

crdr:
        mov #chput,lsend(r0)
	mov #15.,hpit(r0)	;default horizontal pitch
	mov #5.,lmar(r0)	; default left margin .42" + .33"
	mov #125.,rmar(r0)	;default right margin .42" + 8.0"
	mov #8.,tabi(r0)	;default tab increment
	mov #8.,vpit(r0)	;default vertical pitch
	mov #88.,flen(r0)	;default forms length 11"
	mov #4.,tmar(r0)	;default top margin .5"
	mov flen(r0),linmax(r0)	;default number of max lines
	mov linmax(r0),bmar(r0)	; 
	sub #4.,bmar(r0)	;default bottom margin .5"
	clr uname(r0)		;name buffer ptr
	clr title(r0)		;title buffer ptr
	clr head(r0)		;page header flag
	mov #vctlbf,vbufpt(r0)	;command line buffer ptr
	add r0,vbufpt(r0)
	clr lincnt(r0)		;lines printed
	mov #1,pageno(r0)	;page count
	clr pagesn(r0)		;sub page count

	push r1,r2
	mov #100.,r2
1$:	dec r2
	beq 2$
	mov #3,r1
	call @lsend(r0)
	jsr pc,resced
	tst lflowv(r0)		;see if an ACK came back
	blt 3$
	tst lfilef(r0)		;see if a BEL came back
	bpl 1$			;neither came back, keep looping
2$:	mov #-2,lfilef(r0)	;tag timeout as though BEL came back
	pop r2,r1
	jsr pc,@(sp)+		;this will then check for user termination
	bpt			;should never return here
3$:	jsr pc,resced
	clr lflowv(r0)
	pop r2,r1

	jmp common

.sbttl Command interpreter

dhpit===16.
dlmar===8.
drmar===139.
dtabi===8.
dvpit===6.
dflen===66.
dtmar===4
dbmar===3.

vrdr:
	mov #laput,lsend(r0)
	mov #dhpit,hpit(r0)	;default horizontal pitch
	mov #dlmar,lmar(r0)	;default left margin
	mov #drmar,rmar(r0)	;default right margin
	mov #dtabi,tabi(r0)	;default tab increment
	mov #dvpit,vpit(r0)	;default vertical pitch
	mov #dflen,flen(r0)	;default forms length
	mov #dtmar,tmar(r0)	;default top margin
	mov #200.,linmax(r0)	;default number of max lines
	mov linmax(r0),bmar(r0)	; 
	sub #dbmar,bmar(r0)	;default bottom margin
	clr uname(r0)		;name buffer ptr
	clr title(r0)		;title buffer ptr
	clr head(r0)		;page header flag
	mov #vctlbf,vbufpt(r0)	;command line buffer ptr
	add r0,vbufpt(r0)
	clr lincnt(r0)		;lines printed
	mov #1,pageno(r0)	;page count
	clr pagesn(r0)		;sub page count

common:				; code common to both canon and LA120

	cmpb r1,#175		;NOBODY starts with right brace!
  if ne,< push r2,r3,r4,r5 >
  else  <			;start command processing
    loop <  jsr pc,@(sp)+	;get char for command line
	    cmpb r1,#40		;is it a ctrl char?
	    exitl lt		;yes, commands are finished
	    movb r1,@vbufpt(r0)	;put the character in the buffer
	    inc vbufpt(r0)	;bump the ptr
	    push r0
	    add #vctlbe,(sp)
	    cmp vbufpt,(sp)+	;end of buffer?
	    rptl lo		;loop if more room
	    >
	  cmpb r1,#15		;terminated with CR?
	  if eq,< jsr pc,@(sp)+>	;eat the next char (should be LF)
	  push r2,r3,r4,r5	;get room to work
	  mov vbufpt(r0),r1
	  movb #15,(r1)+	;end it cleanly
	  clrb (r1)+
	  clrb (r1)+
	  mov #vctlbf,vbufpt(r0)	;command line buffer ptr
	  add r0,vbufpt(r0)
    loop <
	    jsr pc,cscano	;scan for an option and do it
	    tstb @vbufpt(r0)	;finished?
	    exitl eq
	    mov #';,r2		;look for end of this command
	    jsr pc,cscanc
	    tst r2
	    exitl eq
	    push r0
	    add #vctlbe,(sp)
	    cmp vbufpt,(sp)+	;end of buffer?
	    rptl lo
	    >
	>			;end command line processing

;now to set up printer as required

	mov #cstitl,r5
	jsr pc,cputs		;set title page
	mov title(r0),r5	;any real title?
	if ne,< jsr pc,cputs >	;put it out
	mov #cskip3,r5		;advance some lines
	jsr pc,cputs
	mov uname(r0),r5		;any user name?
	if ne,< jsr pc,cputs >	;output the username

vpitt:
	mov #6,r3		;number of pitches we allow
	mov #vpittb,r2		;ptr to pitch table
1$:	cmp vpit(r0),(r2)+	;is this an allowable pitch?
	beq 2$			;yes, go use its
	tst (r2)+		;skip over this one's parameters
	sob r3,1$		;loop to continue checking
	mov #vpittb+2,r2	;default to 6 for safety
2$:	movb (r2)+,linmax(r0)	;what is max lines on 11 inch paper with pitch?
	movb (r2)+,vptchr	;what is char to use to set pitch?
	mov #vpitsl,r5
	jsr pc,cputs		;set pitch
	mov linmax(r0),r4	; 
	jsr pc,outdec		;put out form length
	mov #'t,r1
	call @lsend(r0)

	cmp tmar(r0),bmar(r0)	;compare top and bottom margins
	bhi 3$			;if top furthur down than bottom, default
	cmp bmar(r0),linmax(r0)	;if bottom longer than we allow, default
	blos 4$
3$:	mov #dtmar,tmar(r0)
	mov linmax(r0),bmar(r0)	; 
	sub #dbmar,bmar(r0)	; 
4$:	mov #escbkt,r5		;escape seq
	jsr pc,cputs
	mov tmar(r0),r4		; 
	jsr pc,outdec		;send decimal
	mov #';,r1
	call @lsend(r0)
	mov bmar(r0),r4		; 
	jsr pc,outdec
	mov #'r,r1		;this is vertical margin
	call @lsend(r0)
	mov bmar(r0),linmax(r0)	;how many lines can we put on this page?
	sub tmar(r0),linmax(r0)	;number is one less than lines

hpitt:	mov #10,r3		;number of pitches we allow
	mov #hpittb,r2		;ptr to pitch table
1$:	cmp hpit(r0),(r2)+	;is this an allowable pitch?
	beq 2$			;yes, go use its
	tst (r2)+		;skip over this one's parameters
	sob r3,1$		;loop to continue checking
	mov #pit16+2,r2		;default to 16 for safety
2$:	movb (r2)+,maxcol(r0)	;what is max column allowed for this pitch?
	movb (r2)+,pitsel+2	;what is char to use to set pitch?
	mov #pitsel,r5	; 
	jsr pc,cputs		;set pitch
	cmp rmar(r0),maxcol(r0)	;too wide?
	bhi 3$			;yes, go use default
	cmp lmar(r0),rmar(r0)	;reasonable?
	blos 4$			;good, go set up
3$:	mov #12,lmar(r0)	; 
	mov maxcol(r0),rmar(r0)	; 
	sub #12,rmar(r0)	; 
4$:	mov #escbkt,r5
	jsr pc,cputs		;escape seq
	mov lmar(r0),r4		; 
	jsr pc,outdec
	mov #';,r1
	call @lsend(r0)
	mov rmar(r0),r4		; 
	jsr pc,outdec	
	mov #'s,r1
	call @lsend(r0)

tabit:	mov #clrtab,r5		;here to set tabs
	jsr pc,cputs		;clear existing ones
	cmp tabi(r0),#3		;let's be reasonable
	blt 5$			;unreasonable people get no tabs
	mov lmar(r0),r4		;start at left margin
1$:	mov #escbkt,r5		;send out the start sequence
	jsr pc,cputs
	mov #15.,tabtmp(r0)	;could only send out 16. at a time
2$:	jsr pc,outdec		;send first tab position
	add tabi(r0),r4		;what is next position?
	cmp r4,rmar(r0)		;are we done?
	bgt 4$			;yes, close it out
	dec tabtmp(r0)		;one fewer to go in this block
	bgt 3$			; if greater than zero try for another
	mov #'u,r1		; tough, have to close out this block
	call @lsend(r0)
	br 1$			; go start new block
3$:	mov #';,r1		;ready to send next tab
	call @lsend(r0)
	br 2$			;loop back to do so
4$:	mov #'u,r1		;closing out
	call @lsend(r0)
	mov #15,r1
	call @lsend(r0)		;be sure to be at left margin
5$:

sethed:	tst head(r0)
	if ne,<
	  mov bmar(r0),r1
	  sub tmar(r0),r1
	  cmp r1,#4		; reasonableness check
	  if lt,<
	    clr head(r0)
	    br 5$
	    >
	  mov rmar(r0),r1
	  sub #17.,r1		; leave room for pageno
	  sub lmar(r0),r1	; does it fit?
	  if le,<		; no, punt header
	    clr head(r0)
	    br 5$
	    >
	  cmp r1,titlen(r0)	; is current title longer than room available?
	  if lt,<		; yes, then truncate to fit
	    mov r1,titlen(r0)	; set title to # of positions remaining
	    mov r0,r2		; calculate addr of position to truncate
	    add r1,r2		; to in title string
	    clrb title(r2)	; trunacte by zapping to asciz
	    >
	  sub titlen(r0),r1	; acount for title length
	  add #2,r1		; really up upage # 15. from right margin
	  mov r1,pcol(r0)	; set number of spaces to send before "Page"
	  >
5$:

	pop r5,r4,r3,r2		;give them back their registers

	jsr pc,hdrln
	jsr pc,@(sp)+		;get char to print
prloop:	tst canonf(r0)		; different handling of control chars for
	if ne,<			; canon
	  cmpb r1,#33		; escape is only special char
	  if eq,<
	    push r1		; quote by doubling
	    call @lsend(r0)
	    pop r1
	    >
	  >
	else <
	  tstb ctltab(r1)	; see if should be escaped or not
	  if eq,<
	    push r1
	    mov #32,r1		; SUB (CBF choice; I would use uparrow)
	    call @lsend(r0)
	    pop r1
	    cmp r1,#177		; rubout is special
	    if eq,<
	      mov #32,r1
	      >
	    else <
	      bis #100,r1
	      >
	    >
	  >
	call @lsend(r0)		; send char to printer
				;maybe should check for headerness here
				; and save work
	cmpb r1,#14		;is this a FormFeed?
	if eq,< inc pageno(r0)
	  clr pagesn(r0)	;clear the sub page number
	  clr lincnt(r0)	;reset count of lines already on page
	  jsr pc,hdrln >	;go print header
	 else < cmpb r1,#12	;is this a LineFeed?
	  if eq,< inc lincnt(r0)	;up the line count
	    cmp lincnt(r0),linmax(r0)	;skips over?
	    if gt,< clr lincnt(r0)
	      inc pagesn(r0)	;increment the sub page number
	      jsr pc,hdrln >	;go print header
	  >
	 >

	jsr pc,@(sp)+		;go get more chars
	br prloop		;go handle the chars

conprn:	.asciz "PRINTER"	; out connect name
concan:	.asciz "CANON"
	.even

svr101:	.asciz "SERVER 101 2 PRINTER 0,0" ; the connect string we send to Arpa
svr103:	.asciz "SERVER 103 2 CANON 0,0"	; canon version
	.even

hdrln:	tst head(r0)		;if we should print header, here it is
    if ne,<
	push r2,r3,r4,r5
	add #2,lincnt(r0)	;this line plus space
	mov #15,r1
	call @lsend(r0)		;start at left
	mov title(r0),r5	;get ptr to title line
	if ne,< jsr pc,cputs >	;print it if we have one
	mov pcol(r0),r5		; space out to Page #
loop <	  mov #40,r1
	  call @lsend(r0)
	  sorl r5
	  >
	mov #pgemsg,r5		;print "Page"
	jsr pc,cputs
	mov pageno(r0),r4
	jsr pc,outdec		;page number itself
	mov pagesn(r0),r4	;print sub number if non-zero
	if gt,< movb #'.,r1
	  call @lsend(r0)	;separate by dot
	  jsr pc,outdec >
	mov #cskip2,r5		;space for real data
	jsr pc,cputs
	pop r5,r4,r3,r2
	>
	rts pc

.sbttl Command scanning utilities

cscano:	mov vbufpt(r0),r1	; 
	push r0
	add #vctlbe,(sp)
	cmp r1,(sp)+		; end of buffer?
	bhis 6$
loop <	movb (r1)+,r2		;get a char
	cmpb r2,#40		;good char?
	if lt,< clrb @vbufptr(r0)
	  rts pc >		;terminate on ctrl chars
	rptl eq			;skip over spaces
	>
	movb r2,cscant(r0)	;set up for compare
	movb (r1)+,cscant+1(r0)	; 
	movb (r1)+,cscant+2(r0)	; 
	movb (r1)+,cscant+3(r0)	; 
	bis #020040,cscant(r0)	;hack to lower case option names
	bis #020040,cscant+2(r0)	; 
	mov r1,vbufpt(r0)		; 
	mov #cmdtbl,r2
	mov #ncmds,r3
loop <	cmp cscant(r0),(r2)+	; 
	bne 2$
	cmp cscant+2(r0),(r2)+
	bne 3$
	mov (r2)+,r5		;get argument for action routine
	add r0,r5
	jmp @(r2)		;go to action routine
2$:	tst (r2)+		;hack to skip over unused args
3$:	cmp (r2)+,(r2)+
	sorl r3
	>
6$:	clr r1
	clr r2
	rts pc			;bad option

cvalue:	mov #'=,r2		;simple action, store value
	jsr pc,cscanc		;scan for =
	tst r2
	if ne,< jsr pc,cdecbn	;good, let's geti decimal
	  mov r3,(r5) >		;stash it away
	rts pc			;else ignore

cflag1:	mov #1,(r5)
	rts pc
cflag0:	clr (r5)
	rts pc

cstrng:	mov #'=,r2		;scan for string
	jsr pc,cscanc		;look for =
	if ne,<  mov vbufpt(r0),r4
	  movb (r4)+,r2		;use this as delimiter
	  mov r4,vbufpt(r0)	; 
	  jsr pc,cscanc		;look for terminater
	  tst r2		;good string ?
	  if ne,< mov r4,(r5)	;save ptr to string
	    clrb -(r2)		;for asciz string
	    sub r4,r2		;make length of string
	    mov r2,2(r5)	;save length
	  >
	>
	rts pc

cscanc:	mov r2,r1		;scan for char
	mov vbufpt(r0),r2	; 
  loop <  cmpb (r2),#40
	  exitl lt
	  cmpb r1,(r2)+
	  if eq,< mov r2,vbufpt(r0)	; 
	    rts pc>
	  push r0
	  add #vctlbe,(sp)
	  cmp r2,(sp)+
	  rptl lo
	>
	clrb @vbufpt(r0)		; 
	clr r2
	rts pc

cdecbn:	mov vbufpt(r0),r1	;convert decimal to binary
	clr r3
loop <	movb (r1)+,r2
	cmpb r2,#'0		;good digit?
	exitl lt
	cmpb r2,#'9
	exitl gt
	mul #10.,r3
	bic #177760,r2
	add r2,r3
	rptl
	>
	dec r1
	mov r1,vbufpt(r0)	; 
	rts pc

cputs:	movb (r5)+,r1
	beq 1$
	call @lsend(r0)
	br cputs
1$:	rts pc

outdec:	push r4		; value to output in r4
	mov r4,r3	; setup for divide
	clr r2
	div #10.,r2	; low order digit in r3
	push r3
	tst r2		; if high order digits zero, goto 1$
	beq 1$
	mov r2,r4	; else output high order digits
	jsr pc,outdec
1$:	pop r1		; output the character
	bis #60,r1
	call @lsend(r0)
	pop r4
	rts pc

chput:	push r0			; save ptr to our own object
	dec lchcnt(r0)		; chars left until ETX
	if eq,<			; did it go to zero?
	  push r1		; save this char
	  mov #3,r1		; output an ETX
	  mov lpdest(r0),r0	; get ptr to dest object for printer we're
	  call @sendw(r0)	; sending to; output the FF
	  pop r1
	  mov (sp),r0		; restore ptr to our own object
	  inc lflowv(r0)	; indicate we've just sent an ETX
	  mov #60.,lchcnt(r0)	; reset chars left until ETX
  loop <    jsr pc,resced	; give someone else a chance
	    cmp lflowv(r0),#1	; is # of outstanding etx's gt 1?
	    rptl gt		; yes, then wait until it gets below 1
	    >
	  >
	cmpb r1,#3		; etx?
	if eq,<
	  call quote
	  >
	cmpb r1,#'W-100		; Chin's EOF?
	if eq,<
	  call quote
	  >
	cmpb r1,#'P-100		; double ^P's
	if eq,<
	  call quote
	  >
	mov lpdest(r0),r0	; get ptr to dest object for printer we're
	call @sendw(r0)		; sending to; output our char finally.
	pop r0			; restore our own object
	return

cquote:	push r1
	mov #'P-100,r1
	mov lpdest(r0),r0
	call @sendw(r0)
	pop r1
	return

laput:	push r0			; save ptr ot our own object
loop <	  tst lflowv(r0)	; LA120 restraining us?
	  exitl eq		; no, send character
	  jsr pc,resced		; yes, resced and try again
	  rptl
	  >
	mov lpdest(r0),r0	; get ptr to dest object for printer we're
	call @sendw(r0)		; sending to; output our char finally.
	pop r0			; restore our own object
	return

.sbttl	Constants

cmdtbl:
	.ascii	/hpit/
	.word	hpit,cvalue
	.ascii	/vpit/
	.word	vpit,cvalue
	.ascii	/lmar/
	.word	lmar,cvalue
	.ascii	/rmar/
	.word	rmar,cvalue
	.ascii	/tabi/
	.word	tabi,cvalue
	.ascii	/tmar/
	.word	tmar,cvalue
	.ascii	/bmar/
	.word	bmar,cvalue
	.ascii	/head/
	.word	head,cflag1
	.ascii	/nohe/
	.word	head,cflag0
	.ascii	/name/
	.word	uname,cstrng
	.ascii	/titl/
	.word	title,cstrng
	.ascii	/page/
	.word	pageno,cvalue
;	.ascii	/cano/
;	.word	canonf,cflag1

	.word 0,0,0,0
ncmds== <.-cmdtbl>/10

hpittb:	.word	10.
	.byte	85.,61
	.word	12.
	.byte	102.,62
	.word	13.
	.byte	112.,63
pit16:	.word	16.
	.byte	140.,64
	.word	5
	.byte	42.,65
	.word	6
	.byte	51.,66
	.word	7
	.byte	56.,67
	.word	8.
	.byte	70.,70

vpittb:	.byte	6,0,66.,61
	.byte	8.,0,88.,62
	.byte	12.,0,132.,63
	.byte	2,0,22.,64
	.byte	3,0,33.,65
	.byte	4,0,44.,66

lbrkt== 133
esc== 33
pgemsg:	.asciz	/Page /
cstitl:	.byte esc,lbrkt
	.ascii	/1r/		;set tmar to 1
	.byte	14		;set FF to get to top of page
	.byte esc,lbrkt
	.ascii	/1z/		;change to 6 lines per inch
	.byte esc,lbrkt
	.ascii	/66t/		;say that the paper is 11 inches
	.byte esc,lbrkt
	.ascii	/5w/		; 5 char per inch
	.byte	esc,lbrkt	; 
	.ascii	/20;40r/	; Tmar 20, Bmar 40
	.byte	esc,lbrkt	; 
	.ascii	/6;39s/		; Lmar 6 (1.2 inches), Rmar 39 (1.2 inches)
	.byte	15,0		;CR and terminate
cskip3:	.byte	15,12
cskip2:	.byte	15,12
	.byte	15,12,0
escbkt:	.byte	esc,lbrkt,0
pitsel:	.byte	esc,lbrkt	;horizontal pitch select string
	.asciz	/5w/
vpitsl:	.byte	esc,lbrkt	;vertical pitch select string
	.ascii	/1r/		;set tmar to 1
	.byte	15,14		;generate CR FF
	.byte	esc,lbrkt
vptchr:	.ascii	/1z/		;the actual pitch setting char
	.byte	esc,lbrkt,0	;preparation for form length

clrtab:	.byte	esc,lbrkt
	.asciz	/2g/

	.even

ctltab:	.byte  1, 0, 0, 0, 0, 0, 0, 7	; ^A - ^G
	.byte 10,11,12, 0,14,15, 0, 0	; ^H - ^O
	.byte  0, 0, 0, 0, 0, 0, 0, 0	; ^P - ^W
	.byte  0, 0, 0,33, 0, 0, 0, 0	; ^X - ^_ for now allow Escape

	.byte  1, 1, 1, 1, 1, 1, 1, 1
	.byte  1, 1, 1, 1, 1, 1, 1, 1
	.byte  1, 1, 1, 1, 1, 1, 1, 1
	.byte  1, 1, 1, 1, 1, 1, 1, 1
	.byte  1, 1, 1, 1, 1, 1, 1, 1
	.byte  1, 1, 1, 1, 1, 1, 1, 1
	.byte  1, 1, 1, 1, 1, 1, 1, 1
	.byte  1, 1, 1, 1, 1, 1, 1, 1
	.byte  1, 1, 1, 1, 1, 1, 1, 1
	.byte  1, 1, 1, 1, 1, 1, 1, 1
	.byte  1, 1, 1, 1, 1, 1, 1, 1
	.byte  1, 1, 1, 1, 1, 1, 1, 0

	.even
