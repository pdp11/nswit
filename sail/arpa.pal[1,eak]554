;;; -*-PALX-*-

.title	ARPA - Chaos Gateway
%arpavn===%fnam2


.insrt setf

.insrt hostab

setf ^"Machine (arpa, xswit)?",config,arpa

.if eq config-xswit

    impcsr==176200		; address of IF-11Q/LH-DH-11 interface
    impvec==140			; interrupt vector, though we don't use it
    ;; chaos definition for this machine
    .insrt xswdef
    myimp==95.
    myhst==2

.endc
.if eq config-arpa

    impcsr==176200		; address of IF-11Q/LH-DH-11 interface
    impvec==140			; interrupt vector, though we don't use it

    ;; define Arpa machine Chaos net configuration
    .insrt arpadf
    myimp==95.
    myhst==0

.endc

.insrt defs
.insrt dcls

.iif ndf asmmap, asmmap===1	; /23 mapping by default

setf ^"IMP interface address (176200)",impcsr,176200
setf ^"IMP interface vector (140)",impvec,140

setf ^"NCP?",asmncp,yes
setf ^"TCP?",asmtcp,no

.xcref	r0,r1,r2,r3,r4,r5,fp,r6,sp,r7,pc
.xcref	proc,call,kcall,return,rtnerr,kretrn,push,pop
.xcref	ash,mul,mtps,mfps,sob
.xcref	if,else,loop,rptl,exitl,sorl
.lif ne 0
.xcref	1$,2$,3$,4$,5$,6$,7$,8$,9$,10$,11$,12$,13$,14$,15$,20$,21$,22$,23$,99$

.sbttl	Constants, Variables and Newman Vectors

nlinks==20.			;number of links we support (< 200.)
nhosts==10.			;number of active hosts we support
nskts==35.			;number of active sockets we support
ntcbs==27.			;no. of tcbs

.iif ndf asmtim, asmtim===1


.if eq asmmap

.iif eq twinfg, mapreg==nm.map+3
.iif ne twinfg, mapreg==nm.map+1

maplo==win3			; mapping starts at Newman page 3
.macro	map p
	movb p,@#mapreg
.endm
.macro	rmap p			; note that into a register this will have
				; non-obvious results.  This is OK since
				; all we ever do with it is pass it back
				; to map.
	movb @#mapreg,p
.endm

.iff	; asmmap

.macro	map p
	mov p,@#kipar6
.endm
.macro	rmap p
	mov @#kipar6,p
.endm

.endc	; asmmap


;;; These macros are used by the NCP to save and restore the users
;;; setting of the 11/23 mapping register for page 6.

.macro	pushp6
	.lif ne asmmap
	push @#kipar6
.endm

.macro	popp6
	.lif ne asmmap
	pop @#kipar6
.endm

.sbttl	Arpa-11 Initialization

.=1000
.iif ne asmmap, .=1200		; after RUGMAP bootstrap
.iif df nmaddr, .=1300		; after Newman interrupt vectors

;;; Start here.  Initialize everything.
start:	go:
	spl 7			;No interruptions now
	mov #1000,sp
.if ne asmmap
	kcall mapini
	kcall pagini
.endc

	;; initialize interrupt vectors
	mov #12,@#10
	mov #3,@#12
	mov #22,r0
loop	< mov r0,-2(r0)
	  mov #3,(r0)+		;BPT on spurious interrupt
	  tst (r0)+
	  cmp r0,#400
	  rptl lo
	  >

.if df nmaddr
	;; initialize Newman interrupt vectors
	mov #1202,r0
loop	< mov r0,-2(r0)
	  mov #2,(r0)+		;Ignore spurious Newman interrupts
	  tst (r0)+
	  cmp r0,#1300
	  rptl lo
	  >
.endc

	mov #linint,@#60
	mov #340,@#62
	mov #linont,@#64
	mov #340,@#66
	bis #100,@tyiflg
	bis #100,@tyoflg

	call clkini
.lif ne asmtim
	call timini

	kcall initcb		;initialize the tcb list

.irp starta,<intsk,outtsk,ststsk>
	call crtask,<#0,#0,#0,#0,#0,#0,#starta>,tcb'starta
.endr
.if ne asmncp
  .irp starta,<ncptsk,usertn>
	call crtask,<#0,#0,#0,#0,#0,#0,#starta>,tcb'starta
  .endr
.endc

	;; create area for chaos allocation
	push #pkarea,#chhplo,#chhplo+chhpsz
	call fsinit

	;; create BGHEAP
	push #bgarea,#bghplo,#bghplo+bghpsz
	call fsinit
	mov #377_8+0,stdare	;this is the pointer for standard area

	call chinit		;initialize the chaos net

.macro	maksvr staddr,cntnam	; macro to make a server
  asm'staddr===1		; assemble the server called for
				; servers must be unique in first 3 letters
  .string ^cntnam,%%temp
	call chlsn,<#%%temp,#staddr>,<r0,r0>
.endm	

.if ne asmncp
	call crmpar,,ncpare	; make a mapped area for the OUT and NCP tasks
	mov ncpare,outare

	mov tcbout,r1
	mov outare,tb.are(r1)	;set the area pointer for OUTTSK
	mov tcbncp,r1
	mov ncpare,tb.are(r1)	;ditto for NCP

	maksvr caint,^"ARPA"
	maksvr srvhan,^"SERVER"
.endc

	maksvr echser,^"ECHO"
	maksvr snkser,^"SINK"
	maksvr uptser,^"UPTIME"
.if ne asmtim
	maksvr timser,^"TIME"
.if ne asmncp
	call crtask,<#0,#0,#0,#0,#0,#0,#timtsk>,r0	; arpa get time
	call crtask,<#0,#0,#0,#0,#0,#0,#timasv>,r0	; arpa time server
.endc
.endc

	mov #lnktbl,r0
	mov #nlinks,r1
loop	< clr (r0)+
	  sorl r1
	  >

.if ne asmncp
	mov #sktble,r0
	mov #nskts*skt.ln/2,r1
loop	< clr (r0)+
	  sorl r1
	  >
.endc

	mov #hstble,r0
	mov #nhosts*hte.ln/2,r1
loop	< clr (r0)+
	  sorl r1
	  >

	mov #clrdat,r0		;get ptr to data area to clear
	mov #<clrend-clrdat>/2,r1	;get number of words to clear
loop	< clr (r0)+
	  sorl r1
	  >

.if ne asmtcp
	clr ipolst
	mov #ipolst,ipolse
.endc
	mov #tyibuf,inplac	;put input into standard place
	mov #tyibuf,r1
	mov cb.bgn(r1),r0
	mov r0,cb.get(r1)
	mov r0,cb.put(r1)
	inc r0
	mov r0,cb.npt(r1)
	mov #tyobuf,r1
	mov cb.bgn(r1),r0
	mov r0,cb.get(r1)
	mov r0,cb.put(r1)
	inc r0
	mov r0,cb.npt(r1)
	mov #1,statmd
.if ne asmncp
	mov #256.,newskt
	mov #-1,alowca
.endc
	clr prtoff

	mov #<<<endpur>_-13.>&7>-1,r0	; the number of pages to make
					; readonly: round down.
	if ne,<
	  mov #kipdr+2,r1	; start with second page
  loop <    bic #4,(r1)+		; make the page readonly
	    sorl r0
	    >
	  >

	call printa,#s.gret	; what if this cocalls?

	jmp manlop		;start time sharing

.if ne asmmap

.if df nmpar
  chpar==nmpar			; chaos packets may be found in Newman
  p6dmap==chpar			; default map is chaos map
.iff
  p6dmap==6*200			; default map is identity -- it is never used
.endc

.insrt map

;;; /23 mapping support.  This code supports allocating/freeing of /23 memory
;;; similar to NMALPG/NMFRPG.

pagini:	;; now initialize rest of physical memory into Newman style pages on
	;; a free list.
	push @#kipar6,@#4	; save identity map and NXM trap vector
	mov #1$,@#4		; NXM to 1$
	mov #7*200,r3		; free list points to 28K
	mov r3,frpgl		; ...
loop <	  mov r3,@#kipar6	; map page
	  add #pagsiz/64.,r3	; physical address of next Newman window size
				; chunk in 32 word units
	  cmp r3,#24.*200	; don't go above 128Kb -- leave it for RUG
	  bhis 2$		; ...
	  mov r3,@#maplo	; set as next free page
	  rptl
	  >
1$:	cmp (sp)+,(sp)+		; ignore NXM PC and PS
2$:	sub #pagsiz/64.,r3	; back up to last existant page
	mov r3,@#kipar6		; map it
	clr @#maplo		; terminate free list with zero
	pop @#4,@#kipar6	; restore NXM trap vector and default map
	kretrn


getpag:	proc 0,1
	mov frpgl,out1(fp)
	beq 1$
	push @#kipar6
	mov frpgl,@#kipar6
	mov @#maplo,frpgl
	pop @#kipar6
	return
1$:	rtnerr

frepag:	proc 1,0
	push @#kipar6
	mov arg1(fp),@#kipar6
	mov frpgl,@#maplo
	mov @#kipar6,frpgl
	pop @#kipar6
	return

defvar	<
frpgl:	.blkw 1			; PAR for next free Newman style page
>

.endc	; ne asmmap

.sbttl Time

;;; Different naming conventions.  Sigh.
$$sleep===0
.insrt clock

.if ne asmtim

$$cvtd===0
.insrt time


.if ne asmncp
;;; Get time from arpanet host and then set local clock.

timtsk:	;; ask various hosts for time.
	mov #timlst,r1		; R1: pointer to imp/host pair
loop <	  tst (r1)		; end of list?
	  exitl eq		; yes, oh well
	  push (r1)+,(r1)+	; NETIM args: imp number, host number
	  kcall netim		; ask for time
	  rptl cs		; try next host if didn't win with this one
	  kcall timset
	  >
	jmp logout


timlst:	.word 11.,0		; SAIL
	.word 95.,1		; S1-A
	.word 0,0
	.word 0,0
	.word 0

;;; Get time from network host.  Stack arguments are imp and host numbers.
;;; Stack result is doubleword time in seconds since January 1, 1900.

netim:	jsr r5,save6		; save registers
	call getsox,#2,r3	; R3: base socket of socket pair
	call orconn,<r3,20+2(sp),16+4(sp),#0,#45,#32.>,r3
				; ORCONN args: socket, imp, host, socket hi,
				; socket lo, byte size
	bcs 2$			; if error, lose
	mov clock,r1		; R1: time to timeout at -- 10 seconds from
	add #10.*60.,r1		; now
	;; wait for some action
loop <	  cocall		; do tasking
	  cmpb (r3),#s.opng	; still openning?
	  exitl ne		; no
	  cmp clock,r1		; timed out?
	  rptl mi		; no, keep waiting
	  >
	cmpb (r3),#s.open	; open now?
	bne 1$			; no, give up
	;; connection open, read time as 32 bit value
loop <	  call readms,r3,r2	; check for input
	  bcs 1$		; connection fried, give up
	  tst r2		; any data?
	  exitl ne		; yes, hack it
	  cmp clock,r1		; timed out?
	  bpl 1$		; yes, give up
	  cocall		; do tasking
	  rptl			; try again and again
	  >
	mov r2,r4
	add #msg.ln+ipl.ln+hl.txt,r4
	call hget32,,<20+2(sp),16(sp)>
				; Note: HGET32 result has words backward
	call fremap,r2		; free message
	call close,r3,r0	; close connection
	jsr r5,rest6		; restore registers
	clc			; win return
	kretrn
1$:	call close,r3,r0	; close connection
2$:	jsr r5,rest6		; restore registers
	pop (sp),(sp)		; remove arguments from stack
	sec			; error return
	kretrn


;;; ARPAnet time server.
timasv:
loop <	  cocall
	  tst timsts		; time known?
	  rptl eq		; no, wait
	  >
loop <	  cocall
	  call listen,<#45,#32.>,r0	; wait on socket 45
	  rptl cs
	  ;; wait for something to happen
  loop <    cocall
	    cmpb (r0),#s.wait	; still waiting for connection?
	    rptl eq		; yes
	    >
	  cmpb (r0),#s.open	; connection open?
	  if ne,<		; no
	    call close,r0,r0	; give up
	    rptl		; and try again
	    >
	  call hhsend,<r0,#4>	; start composition of 4 byte message
	  bcs 1$		; opps
	  call time		; get time
				; TIME result = HHSD32 args
	  call hhsd32		; put into message
	  call hhdsnd		; send it
;	  bcs 1$
1$:	  call close,r0,r0	; close
	  rptl			; go back to serve again
	  >
.endc


$$ddiv===1			; include double divide in STUFF
.endc	; ne asmtim

.sbttl	.INSRTs

.insrt nxmcat

.insrt nncptc
.insrt stuff

.iif ne asmtcp,	.insrt ip
.iif ne asmtcp, .insrt tcp

.insrt strucs
.insrt imp

.iif ne asmncp, .insrt ncp
.iif p2,	printn ^"After the Arpa NCP .=",\.

;;; Insert the user programs
.insrt status
.iif ne asmncp, .insrt caface
.iif ne asmncp, .insrt tn

;;; Insert the support files
.macro crash message
	bpt
.endm
%enacr===1
.insrt fsm


;;; Insert the CHAOS Net NCP and support routines
.iif p2,	printn ^"After TN, CAFACE, NUTILS .=",\.

;;; Insert the NCP itself
.insrt cncp
asmchp===1
.insrt chsall

.insrt chsser

.if eq asmmap			; if no 11/23, then using Newman mapping
pagsiz==winsiz			; size is equal to newman page size
getpag==nmalpg			; get routine is Newman Allocate Page
frepag==nmfrpg			; free routine is Newman Free Page
.endc

.iif p2,	printn ^"After CNCP .=",\.

.sbttl	Free Storage and Table Area


constants

endpur==.
;;; We can not longer afford to round up from the end of the pure code.
;;; Instead we will round down from end pure when deciding how much to
;;; make readonly.
;.=<.+17777>&160000		; move to next page
printn ^"endpur is ",\endpur
;wasted==.-endpur		; amount that's wasted here

;;; put the variables at the bottom, yes I know it's kludgy but it saves
;;; some space and if we ever find this bug we can go back to winning, in
;;; the old style.

patch:	pat:	.blkw 100

begvar==.
variables
printn ^"variables take up ",\<.-begvar>/2,^" words."


;;; Pointers to various task TCBs.

tcbint:	.blkw 1
tcbout:	.blkw 1
tcbncp:	.blkw 1
tcbuse:	.blkw 1
tcbsts:	.blkw 1
tcbtim:	.blkw 1

stdare:	.blkw 1			;pointer for standard area
ncpare:	.blkw 1			;area for NCP
outare:	.blkw 1			;area for OUTTSK

bgarea:	.blkb larea		; descriptor for standard message area
pkarea:	.blkb larea		; descriptor for chaos packet area

dmalo==.			; DMA below this address is double plus
				; ungood

;;; Big Heap.
bghpsz==4096.			; 2K words
; This memory no longer exists.
; bghplo=160000			; use memory at 28-30K
bghplo:	.blkb bghpsz


;;; Chaosnet heap.
.iif eq asmmap, chhpsz==110000-.; 110000 is almost up to symbol table of a
				; RUG124
.iif ne asmmap, chhpsz==maplo-.	; 140000 is the start of mapping window
chhplo:	.blkb chhpsz
.iif lt chhpsz-<1400.*2>,	.error program too big

.end start
