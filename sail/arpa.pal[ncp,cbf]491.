;;; -*-MIDAS-*-

.title	ARPA - Chaos Gateway
%arpavn===%fnam2

;;; This module supports the ARPAnet Host-Host protocol (NIC 8246).


.insrt defns
.insrt dcls

setf ^"Assemble XSWIT version?",asmxsw
.if ne asmxsw

    asmnm===0			; can't use Newman mapping (DMA won't work)
    asmmap===1			; must use 11/23 mapping
    asmchi===0			; use hardware IMP interface, not Chaos net
    impcsr==176200		; address of IF-11Q/LH-DH-11 interface
    impvec==140			; interrupt vector, though we don't use it
    ;; chaos definition for this machine
    .insrt xswdef

.iff				; asmxsw

    setf ^"IMP interface via Chaos net?",asmchi
   .if eq asmchi		; use hardware interface, not Chaos net
	asmnm===0		; can't use Newman mapping
	asmmap===1		; must use 11/23 mapping
	impcsr==176200		; address of IF-11Q/LH-DH-11 interface
	impvec==140		; interrupt vector, though we don't use it
    .endc

    ;; define Arpa machine Chaos net configuration
    .insrt arpadf

.endc

.iif ndf asmnm,  asmnm===1	; use Newman by default
.iif ndf asmmap, asmmap===0	; no /23 mapping by default
.iif ndf asmchi, asmchi===1	; chaosnet IMP (as opposed to hardware IMP)


.xcref	r0,r1,r2,r3,r4,r5,fp,r6,sp,r7,pc
.xcref	proc,call,kcall,return,rtnerr,kretrn,push,pop
.xcref	ash,mul,mtps,mfps,sob
.xcref	if,else,loop,rptl,exitl,sorl
.lif ne 0
.xcref	1$,2$,3$,4$,5$,6$,7$,8$,9$,10$,11$,12$,13$,14$,15$,20$,21$,22$,23$,99$

.sbttl	Constants, Variables and Newman Vectors

nlinks == 20.			;number of links we support (< 200.)
nhosts == 5			;number of active hosts we support
nskts == 30.			;number of active sockets we support

.iif ndf asmtim, asmtim===1


.if eq asmmap

.iif eq twinfg, mapreg==nm.map+3
.iif ne twinfg, mapreg==nm.map+1

maplo==win3			; mapping starts at Newman page 3
.macro	map p
	movb p,@#mapreg
.endm

.iff	; asmmap

kipdr==172300			; Kernel instruction space page descriptor
kipar==172340			; Kernel instruction space page address

kipar6==kipar+<6*2>
maplo==6_13.			; mapping uses /23 page 6
.macro	map p
	mov p,@#kipar6
.endm

.endc	; asmmap


.macro	promap code		;macro to save and restore the newman map
;	push curare
	push curpag
	code
	pop curpag
;	pop curare
	map curpag
.endm

;;; These are the split out versions for contorted code

.macro	savmap
;	push curare
	push curpag
.endm

.macro	resmap
	pop curpag
;	pop curare
	map curpag
.endm

;;; These macros are used by the NCP to save and restore the users
;;; setting of the 11/23 mapping register for page 6.

.macro	pushp6
	.lif ne asmmap
	push @#kipar6
.endm

.macro	popp6
	.lif ne asmmap
	pop @#kipar6
.endm

.sbttl	Arpa-11 Initialization

.=100				;put down an initial clock vector
	.+2			;so we can easily start the program
	rti

.iif ndf nmaddr, .=1200		; after RUGMAP
.iif df  nmaddr, .=1300		; after Newman interrupt vectors


;;; Get the Traffic Controller and Associated Code and Macros
.insrt nncptc


;;; Start here.  Initialize everything.
start:	go:
	spl 7			;No interruptions now
	mov #1000,sp
.lif ne asmmap
	kcall mapini

	;; initialize interrupt vectors
	mov #12,@#10
	mov #3,@#12
	mov #22,r0
loop	< mov r0,-2(r0)
	  mov #3,(r0)+		;BPT on spurious interrupt
	  tst (r0)+
	  cmp r0,#400
	  rptl lo
	  >

.if df nmaddr
	;; initialize Newman interrupt vectors
	mov #1202,r0
loop	< mov r0,-2(r0)
	  mov #2,(r0)+		;Ignore spurious Newman interrupts
	  tst (r0)+
	  cmp r0,#1300
	  rptl lo
	  >
.endc

	mov #linint,@#60
	mov #340,@#62
	mov #linont,@#64
	mov #340,@#66
	bis #100,@tyiflg
	bis #100,@tyoflg

	call clkini
.lif ne asmtim
	call timini

	initcb			;initialize the tcb list

.irp starta,<intsk,outtsk,ncptsk,usertn,ststsk>
	call crtask,<#0,#0,#0,#0,#0,#0,#starta>,tcb'starta
.endr

.if df nmaddr
	bis #1,@#nm.enb		;initialize the newman
	call nmfrap		;free all our newman pages

.if eq twinfg
	call nmalpg,<>,r1	;get 2 pages for the chaos area
	movb r1,@#nm.map+1	;map it in
	call nmalpg,<>,r1	; ...
	movb r1,@#nm.map+2
.endc	; eq twinfg
.endc	; df nmaddr

	;; create CHHEAP
	mov #chhplo,r1
	mov r1,chheap
	mov #chhpsz,r0		;size is in words
	jsr pc,makear

	;; create BGHEAP
	mov #bghplo,r1		; get a ptr to the heap
	mov r1,bgheap		; remember it in big heap
	mov #bghpsz,r0		; its size
	jsr pc,makear
	mov #377_8+0,stdare	;this is the pointer for standard area

	call chinit		;initialize the chaos net

	call getpag,<>,r2	;get a newman page for the tcb area
	mov r2,ncpare
	mov r2,outare
	map r2
	mov #maplo,r1		;init area for the TCBs
	mov #pagsiz,r0		;size of the area
	jsr pc,makear

	mov tcbout,r1
	mov outare,tb.are(r1)	;set the area pointer for OUTTSK
	mov tcbncp,r1
	mov ncpare,tb.are(r1)	;ditto for NCP

	call chlsn,<#arcntn,#caint>,<r0,r0>	;set up the initial listener
	call chlsn,<#svctn,#srvhan>,<r0,r0>	;listen for server requests
.if ne asmtim
	call crtask,<#0,#0,#0,#0,#0,#0,#timtsk>,r0	; arpa get time
	call chlsn,<#timest,#timsrv>,<r0,r0>		; chaos time server
.if ne 1
	call crtask,<#0,#0,#0,#0,#0,#0,#timasv>,r0	; arpa time server
.endc
.endc

	mov #lnktbl,r0
	mov #nlinks,r1
loop	< clr (r0)+
	  sorl r1
	  >

	mov #sktble,r0
	mov #nskts*skt.ln/2,r1
loop	< clr (r0)+
	  sorl r1
	  >

	mov #hstble,r0
	mov #nhosts*hte.ln/2,r1
loop	< clr (r0)+
	  sorl r1
	  >

	mov #clrdat,r0		;get ptr to data area to clear
	mov #<clrend-clrdat>/2,r1	;get number of words to clear
loop	< clr (r0)+
	  sorl r1
	  >

	mov #tyibuf,inplac	;put input into standard place
	mov #tyibuf,r1
	mov cb.bgn(r1),r0
	mov r0,cb.get(r1)
	mov r0,cb.put(r1)
	inc r0
	mov r0,cb.npt(r1)
	mov #tyobuf,r1
	mov cb.bgn(r1),r0
	mov r0,cb.get(r1)
	mov r0,cb.put(r1)
	inc r0
	mov r0,cb.npt(r1)
	mov #256.,newskt
	mov #1,statmd

	spl 0

	call print,#s.gret
	jmp manlop		;start time sharing


prococ:	promap <cocall>
	kretrn

.if ne asmmap

;;; /23 mapping support.  This code supports allocating/freeing of /23 memory
;;; similar to NMALPG/NMFRPG.

pagsiz==4096.			; Socket window size


;;; Set up identity map.

mapini:	;; initialize kernel PDRs and PARs
	mov #7,r0		; R0: number of pages
	mov #kipdr,r1		; R1: address of 1st PDR
	mov #kipar,r2		; R2: address of 1st PAR
	clr r3			; R3: block address for 1st page
loop <	  mov #177_8+6,(r1)+	; set PDR to 8K r/w page
	  mov r3,(r2)+		; set PAR for identity mapping
	  add #200,r3		; increase block address by 128 blocks (8K
	  sorl r0		; bytes)
	  >
	mov #177_8+6,(r1)	; set last PDR
	mov #177600,(r2)	; map last page to device registers of Unibus
	add #200,r3		; step R3 over Newman hole
;	mov #20,@#172516	; set 22 bit mapping (random)
	mov #1,@#177572		; enable mapping

	;; now initialize rest of physical memory into Newman style pages on
	;; a free list.
	push @#kipar6,@#4	; save identity map and NXM trap vector
	mov #1$,@#4		; NXM to 1$
	mov r3,frpgl		; free list points to 32K
loop <	  mov r3,@#kipar6	; map page
	  add #pagsiz/64.,r3	; physical address of next Newman window size
				; chunk in 32 word units
	  cmp r3,#24.*200	; don't go above 128Kb -- leave it for RUG
	  bhis 2$		; ...
	  mov r3,@#maplo	; set as next free page
	  rptl
	  >
1$:	cmp (sp)+,(sp)+		; ignore NXM PC and PS
2$:	sub #pagsiz/64.,r3	; back up to last existant page
	mov r3,@#kipar6		; map it
	clr @#maplo		; terminate free list with zero
	pop @#4,@#kipar6	; restore NXM trap vector and identity map
	kretrn


phyadd:	mov r0,-(sp)		; save low bits of virtual address
	bic #160000,(sp)	; ...
	ash #-13.+1,r0		; get page number
	bic #177761,r0		; ...
	mov kipar(r0),r1	; get PAR for page
	clr r0			; convert 32 word chunk address to byte
	ashc #6,r0		; address
	add (sp)+,r1		; ad in low bits of virtual address
	adc r0			; ...
	ash #4,r0		; put bits 17 and 18 of physical address into
				; position for DMA interface
	kretrn

getpag:	proc 0,1
	mov frpgl,out1(fp)
	beq 1$
	push @#kipar6
	mov frpgl,@#kipar6
	mov @#maplo,frpgl
	pop @#kipar6
	return
1$:	rtnerr

frepag:	proc 1,0
	push @#kipar6
	mov arg1(fp),@#kipar6
	mov frpgl,@#maplo
	mov @#kipar6,frpgl
	pop @#kipar6
	return

frpgl:	.blkw 1			; PAR for next free Newman style page

.endc	; ne asmmap

.sbttl	.INSRTs

.insrt ncp
.iif p2,	printn ^"After the Arpa NCP .=",\.

;;; Insert the user programs
.insrt status
.insrt caface
.insrt tn

;;; Insert the support files
.insrt nutils

;;; Insert the CHAOS Net NCP and support routines
.iif p2,	printn ^"After TN, CAFACE, NUTILS .=",\.

;;; Insert the NCP itself
.insrt cncp

;;; Insert the interface to the allocator.
.insrt allint

.if eq asmmap			; if no 11/23, then using Newman mapping
pagsiz==winsiz			; size is equal to newman page size
getpag==nmalpg			; get routine is Newman Allocate Page
frepag==nmfrpg			; free routine is Newman Free Page
.endc

.iif p2,	printn ^"After CNCP .=",\.

.sbttl Time

;;; Different naming conventions.  Sigh.
.macro	return
	rts pc
.endm

$$sleep===0
.insrt clock

.if ne asmtim

$$cvtd===0
.insrt time


;;; Get time from arpanet host and then set local clock.

timtsk:
.if ne asmchi
	;; wait for IMP to respond.
loop <	  cocall
	  tst conect
	  rptl eq
	  >
.endc
	;; ask various hosts for time.
	mov #timlst,r1		; R1: pointer to imp/host pair
loop <	  tst (r1)		; end of list?
	  exitl eq		; yes, oh well
	  push (r1)+,(r1)+	; NETIM args: imp number, host number
	  kcall netim		; ask for time
	  rptl cs		; try next host if didn't win with this one
	  kcall timset
	  >
	jmp logout


timlst:	.word 54,3		; MC
	.word 6,2		; AI
	.word 54,0		; XX
	.word 13,0		; SAIL
	.word 0

;;; Get time from network host.  Stack arguments are imp and host numbers.
;;; Stack result is doubleword time in seconds since January 1, 1900.

netim:	jsr r5,save6		; save registers
	call getsox,#2,r3	; R3: base socket of socket pair
	call orconn,<r3,20+2(sp),16+4(sp),#0,#45,#32.>,r3
				; ORCONN args: socket, imp, host, socket hi,
				; socket lo, byte size
	bcs 2$			; if error, lose
	mov clock,r1		; R1: time to timeout at -- 10 seconds from
	add #10.*60.,r1		; now
	;; wait for some action
loop <	  cocall		; do tasking
	  cmpb (r3),#s.opng	; still openning?
	  exitl ne		; no
	  cmp clock,r1		; timed out?
	  rptl mi		; no, keep waiting
	  >
	cmpb (r3),#s.open	; open now?
	bne 1$			; no, give up
	;; connection open, read time as 32 bit value
loop <	  call readms,r3,r2	; check for input
	  bcs 1$		; connection fried, give up
	  tst r2		; any data?
	  exitl ne		; yes, hack it
	  cmp clock,r1		; timed out?
	  bpl 1$		; yes, give up
	  cocall		; do tasking
	  rptl			; try again and again
	  >
	mov r2,r4
	add #msg.ln+ipl.ln+hl.txt,r4
	call hget32,,<20+2(sp),16(sp)>
				; Note: HGET32 result has words backward
	mov bgheap,r0		; FREEB arg: heap
	mov r2,r1		; FREEB arg: pointer
	call freeb		; free message
	call close,r3,r0	; close connection
	jsr r5,rest6		; restore registers
	clc			; win return
	kretrn
1$:	call close,r3,r0	; close connection
2$:	jsr r5,rest6		; restore registers
	pop (sp),(sp)		; remove arguments from stack
	sec			; error return
	kretrn


.if ne 1
;;; ARPAnet time server.
timasv:
loop <	  cocall
	  tst timsts		; time known?
	  rptl eq		; no, wait
	  >
loop <	  cocall
	  call listen,<#45,#32.>,r0	; wait on socket 45
	  rptl cs
	  ;; wait for something to happen
  loop <    cocall
	    cmpb (r0),#s.wait	; still waiting for connection?
	    rptl eq		; yes
	    >
	  cmpb (r0),#s.open	; connection open?
	  if ne,<		; no
	    call close,r0,r0	; give up
	    rptl		; and try again
	    >
	  call hhsend,<r0,#4>	; start composition of 4 byte message
	  bcs 1$		; opps
	  call time		; get time
				; TIME result = HHSD32 args
	  call hhsd32		; put into message
	  call hhdsnd		; send it
;	  bcs 1$
1$:	  call close,r0,r0	; close
	  rptl			; go back to serve again
	  >
.endc


;;; Chaosnet TIME server.
timsrv:	;; task created and started here with R0/ RFC, R1/ connection.
	tst timsts		; time known?
	if eq,<			; no
	  call chcls,<r1,#timena>	; refuse
	  jcall logout
	  >
	kcall time		; get time in seconds since Jan 1, 1900
	mov sp,r2		; R2: pointer to TIME result
	call chans,<r0,r1,r2,#4>	; send ANS with 4 bytes of time
	cmp (sp)+,(sp)+		; remove TIME result
	jcall logout		; and kill this process

timest:	.asciz "TIME"		; contact name
timena:	.asciz "Time not available"	; error message
	.even


$$ddiv===1
.insrt stuff
.endc	; ne asmtim

.sbttl	Free Storage and Table Area


patch:	pat:	.blkw 100

constants


;;; Pointers to various task TCBs.
tcbint:	.blkw 1
tcbout:	.blkw 1
tcbncp:	.blkw 1
tcbuse:	.blkw 1
tcbsts:	.blkw 1
tcbtim:	.blkw 1

stdare:	.blkw 1			;pointer for standard area
ncpare:	.blkw 1			;area for NCP
outare:	.blkw 1			;area for OUTTSK

curpag:	0			;page of NM memory we currently have mapped in
				;for ARPA messages
curare:	0			;address of the area within our address space

bgheap:	.blkw 1
chheap:	.blkw 1


;;; TCBs.

tcbabg:	.blkb tcb.ln*21.
tcbaen===.

;;; Link, host, and socket tables.

lnktbl:	.blkw nlinks		; link to socket association table
lnkend::
hstble: .blkb nhosts*hte.ln 	; host table entries
hstend::
sktble: .blkb nskts*skt.ln 	; space for active socket info
sktend::
tblns===.-lnktbl

;;; Big Heap.
bghpsz==4096.			; 2K words
.iif eq asmmap,	bghplo=160000
.iif ne asmmap,	bghplo:	.blkb bghpsz


;;; Chaosnet heap.
.iif eq asmmap, chhpsz==110000-.; 110000 is almost up to symbol table of a
				; RUG124
.iif ne asmmap, chhpsz==140000-.; 140000 is the start of Newman map area
chhplo:	.blkb chhpsz
.iif lt chhpsz-<1400.*2>,	.error program too big 



.end start
